@{
    ViewData["Title"] = "Gi·ªè h√†ng";
}

<style>
body {
    background: #fff8e1;
}
.cart-hero {
    background: linear-gradient(120deg, #ffe082 0%, #ff9800 100%);
    color: #e31937;
    padding: 2.5rem 0 2rem 0;
    margin-bottom: 2rem;
    border-radius: 0 0 32px 32px;
    box-shadow: 0 8px 32px rgba(255, 195, 0, 0.10);
    text-align: center;
}
.cart-hero h1 {
    font-family: 'Merge Black W00 Regular', 'Roboto', sans-serif;
    font-size: 2.5rem;
    font-weight: 900;
    margin-bottom: 0.5rem;
    letter-spacing: 1px;
}
.cart-hero p {
    font-size: 1.2rem;
    font-weight: 500;
    color: #e31937;
}
.cart-table {
    background: #fff;
    border-radius: 24px;
    overflow: hidden;
    box-shadow: 0 4px 24px rgba(255, 195, 0, 0.10), 0 1.5px 8px rgba(227, 25, 55, 0.07);
    margin-bottom: 2rem;
}
.cart-table th {
    background: #fffbe7;
    border: none;
    padding: 1.2rem;
    font-weight: 700;
    color: #e31937;
    font-size: 1.1rem;
    letter-spacing: 0.5px;
}
.cart-table td {
    padding: 1.2rem 1rem;
    border: none;
    border-bottom: 1px solid #ffe082;
    vertical-align: middle;
}
.cart-item-name {
    font-weight: 700;
    color: #e31937;
    font-size: 1.15rem;
    margin-bottom: 0.25rem;
}
.cart-options {
    font-size: 0.98rem;
    color: #ff9800;
    background: #fffbe7;
    padding: 0.4rem 0.8rem;
    border-radius: 12px;
    margin: 0.15rem 0;
    display: inline-block;
}
.cart-price {
    font-weight: 700;
    color: #ff9800;
    font-size: 1.1rem;
}
.cart-total {
    background: linear-gradient(90deg, #ffe082 0%, #ff9800 100%);
    color: #e31937;
    padding: 1.5rem 2rem;
    border-radius: 24px;
    margin-top: 2rem;
    font-size: 1.3rem;
    font-weight: 800;
    box-shadow: 0 2px 8px rgba(255, 195, 0, 0.10);
    display: flex;
    align-items: center;
    justify-content: space-between;
}
.btn-remove {
    background: #fff;
    border: 2px solid #e31937;
    border-radius: 16px;
    padding: 0.5rem 1rem;
    color: #e31937;
    font-weight: 700;
    transition: all 0.2s;
}
.btn-remove:hover {
    background: #e31937;
    color: #fff;
    border-color: #ff9800;
    transform: scale(1.08);
}
.btn-order {
    background: linear-gradient(90deg, #e31937 0%, #ff9800 100%);
    border: none;
    border-radius: 32px;
    padding: 1rem 2.5rem;
    font-size: 1.25rem;
    font-weight: 800;
    color: #fff;
    box-shadow: 0 2px 8px rgba(227, 25, 55, 0.10);
    transition: all 0.2s;
    margin-bottom: 1rem;
}
.btn-order:hover {
    background: linear-gradient(90deg, #ff9800 0%, #e31937 100%);
    color: #fffbe7;
    transform: scale(1.04);
}
.btn-outline-danger {
    border-radius: 32px;
    font-weight: 600;
    border: 2px solid #e31937;
    color: #e31937;
    background: #fff;
    transition: background 0.2s, color 0.2s;
}
.btn-outline-danger:hover {
    background: #e31937;
    color: #fff;
}
.input-group.input-group-sm .form-control {
    min-width: 40px;
    max-width: 60px;
    text-align: center;
    padding-left: 0;
    padding-right: 0;
    border-left: 0;
    border-right: 0;
    border-radius: 0;
    box-shadow: none;
    font-size: 1.1rem;
    font-weight: 700;
    color: #e31937;
    background: #fffbe7;
}
.input-group.input-group-sm .btn {
    border-radius: 0 !important;
}
.input-group.input-group-sm {
    width: 110px;
}
.input-group .btn-outline-secondary {
    border-color: #ff9800;
    color: #ff9800;
    background: #fff;
    font-weight: 700;
}
.input-group .btn-outline-secondary:hover {
    background-color: #ff9800;
    border-color: #ff9800;
    color: #fff;
}
input[type=number]::-webkit-inner-spin-button,
input[type=number]::-webkit-outer-spin-button {
    -webkit-appearance: none;
    margin: 0;
}
input[type=number] {
    -moz-appearance: textfield;
}
@@media (max-width: 768px) {
    .cart-hero {
        font-size: 1rem;
        border-radius: 0 0 18px 18px;
        padding: 1.2rem 0 1rem 0;
    }
    .cart-table {
        border-radius: 12px;
    }
    .cart-total {
        border-radius: 12px;
        font-size: 1.1rem;
        padding: 1rem 1rem;
        flex-direction: column;
        gap: 0.5rem;
    }
    .btn-order, .btn-outline-danger {
        font-size: 1rem;
        padding: 0.7rem 1.2rem;
        border-radius: 20px;
    }
}
</style>

<div class="cart-hero">
    <div class="container">
        <h1 class="mb-2">üõí Gi·ªè h√†ng c·ªßa b·∫°n</h1>
        <p class="mb-0">Ki·ªÉm tra v√† ho√†n t·∫•t ƒë∆°n h√†ng c·ªßa b·∫°n</p>
    </div>
</div>

<div class="container">
    <div id="cartContainer"></div>
</div>
@section Scripts {
<script>
function renderCart() {
    console.log('=== DEBUG GI·ªé H√ÄNG ===');
    console.log('localStorage.getItem("cart"):', localStorage.getItem('cart'));
    
    let cart = JSON.parse(localStorage.getItem('cart')) || [];
    console.log('Cart parsed:', cart);
    console.log('Cart length:', cart.length);
    console.log('Cart type:', typeof cart);
    console.log('=== END DEBUG ===');
    
    let html = '';
    
    if (cart.length === 0) {
        html = `
            <div class="text-center py-5">
                <div class="mb-4">
                    <i class="fas fa-shopping-cart" style="font-size: 4rem; color: #ccc;"></i>
                </div>
                <h3 class="text-muted mb-3">Gi·ªè h√†ng c·ªßa b·∫°n ƒëang tr·ªëng</h3>
                <p class="text-muted mb-4">H√£y th√™m m·ªôt s·ªë m√≥n ƒÉn ngon v√†o gi·ªè h√†ng nh√©!</p>
                <a href="/Menu/MonNgonPhaiThu" class="btn btn-danger btn-lg">
                    <i class="fas fa-utensils me-2"></i>
                    Xem th·ª±c ƒë∆°n
                </a>
            </div>`;
        document.getElementById('cartContainer').innerHTML = html;
        return;
    }
    
    let total = 0;
    html += `<div class="cart-table">
        <table class="table table-hover mb-0">
            <thead>
                <tr>
                    <th style="width: 30%;">üçî S·∫£n ph·∫©m</th>
                    <th style="width: 35%;">‚öôÔ∏è T√πy ch·ªçn</th>
                    <th style="width: 12%;">üí∞ ƒê∆°n gi√°</th>
                    <th style="width: 10%;">üì¶ S·ªë l∆∞·ª£ng</th>
                    <th style="width: 13%;">üíµ Th√†nh ti·ªÅn</th>
                    <th style="width: 10%;">üóëÔ∏è</th>
                </tr>
            </thead>
            <tbody>`;
    
    cart.forEach((item, idx) => {
        let itemName, itemPrice, itemQuantity, itemSubtotal, optionsHtml;
        
        // X·ª≠ l√Ω d·ªØ li·ªáu m·ªõi (t·ª´ code hi·ªán t·∫°i)
        if (item.ProductNameSnapshot) {
            itemName = item.ProductNameSnapshot;
            itemPrice = item.UnitPrice;
            itemQuantity = item.Quantity;
            itemSubtotal = item.Subtotal;
            
            try {
                const options = JSON.parse(item.SelectedConfigurationSnapshot);
                optionsHtml = Object.entries(options).map(([groupName, option]) => {
                    if (typeof option === 'object' && option.optionName) {
                        return `<div class="cart-options">‚Ä¢ ${groupName}: ${option.optionName}${option.priceAdjustment > 0 ? ` (+${option.priceAdjustment.toLocaleString()}ƒë)` : ''}</div>`;
                    } else {
                        return `<div class="cart-options">‚Ä¢ ${groupName}: ${option}</div>`;
                    }
                }).join('');
            } catch (e) {
                optionsHtml = '<div class="cart-options text-muted">Kh√¥ng c√≥ t√πy ch·ªçn</div>';
            }
        }
        // X·ª≠ l√Ω d·ªØ li·ªáu c≈© (t·ª´ API)
        else if (item.productName) {
            itemName = item.productName;
            itemPrice = item.basePrice;
            itemQuantity = item.quantity;
            itemSubtotal = item.totalPrice;
            
            if (item.options && item.options.length > 0) {
                optionsHtml = item.options.map(option => {
                    const variantText = option.variantName ? ` (${option.variantName})` : '';
                    const priceText = option.priceAdjustment > 0 ? ` (+${option.priceAdjustment.toLocaleString()}ƒë)` : '';
                    return `<div class="cart-options">‚Ä¢ ${option.productName}${variantText}${priceText}</div>`;
                }).join('');
            } else {
                optionsHtml = '<div class="cart-options text-muted">Kh√¥ng c√≥ t√πy ch·ªçn</div>';
            }
        }
        // D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá
        else {
            console.warn('D·ªØ li·ªáu gi·ªè h√†ng kh√¥ng h·ª£p l·ªá:', item);
            return; // B·ªè qua item n√†y
        }
        
        // T√≠nh t·ªïng ti·ªÅn cho item n√†y
        if (item.Subtotal !== undefined) {
            total += item.Subtotal;
        } else if (item.totalPrice !== undefined) {
            total += item.totalPrice;
        } else {
            total += itemSubtotal;
        }
        
        html += `<tr>
            <td>
                <div class="cart-item-name">${itemName}</div>
            </td>
            <td>
                ${optionsHtml}
            </td>
            <td class="cart-price">${itemPrice.toLocaleString()} ƒë</td>
            <td class="text-center">
                <div class="input-group input-group-sm" style="max-width: 120px; margin: 0 auto;">
                    <button class="btn btn-outline-secondary btn-sm" onclick="updateQuantity(${idx}, -1)" type="button">
                        <i class="fas fa-minus"></i>
                    </button>
                    <input type="number" class="form-control text-center" value="${itemQuantity}" min="1" 
                           onchange="updateQuantity(${idx}, 0, this.value)" style="border-left: 0; border-right: 0;">
                    <button class="btn btn-outline-secondary btn-sm" onclick="updateQuantity(${idx}, 1)" type="button">
                        <i class="fas fa-plus"></i>
                    </button>
                </div>
            </td>
            <td class="cart-price fw-bold">${itemSubtotal.toLocaleString()} ƒë</td>
            <td class="text-center">
                <button class="btn btn-remove" onclick="removeCartItem(${idx})" title="X√≥a m√≥n n√†y">
                    <i class="fas fa-trash"></i>
                </button>
            </td>
        </tr>`;
    });
    
    html += `</tbody></table></div>`;
    
    html += `<div class="cart-total">
        <div class="row align-items-center">
            <div class="col-md-6">
                <h4 class="mb-0">üìã T·ªïng c·ªông ${cart.length} m√≥n</h4>
            </div>
            <div class="col-md-6 text-end">
                <h3 class="mb-0">üíµ ${total.toLocaleString()} ƒë</h3>
            </div>
        </div>
    </div>`;
    
    html += `<div class="text-center mt-4">
        <button class="btn btn-order me-3" onclick="placeOrderDemo()">
            <i class="fas fa-credit-card me-2"></i>
            ƒê·∫∑t h√†ng ngay
        </button>
        <button class="btn btn-outline-danger" onclick="clearCart()">
            <i class="fas fa-trash me-2"></i>
            X√≥a to√†n b·ªô gi·ªè h√†ng
        </button>
    </div>`;
    
    document.getElementById('cartContainer').innerHTML = html;
}
function removeCartItem(idx) {
    let cart = JSON.parse(localStorage.getItem('cart')) || [];
    cart.splice(idx, 1);
    localStorage.setItem('cart', JSON.stringify(cart));
    renderCart();
}
function placeOrderDemo() {
    let cart = JSON.parse(localStorage.getItem('cart')) || [];
    if (cart.length === 0) return;
    alert('ƒê·∫∑t h√†ng th√†nh c√¥ng! (Demo)');
    localStorage.removeItem('cart');
    renderCart();
}

function clearCart() {
    if (confirm('B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a to√†n b·ªô gi·ªè h√†ng?')) {
        localStorage.removeItem('cart');
        renderCart();
    }
}

function updateQuantity(index, change, newValue = null) {
    let cart = JSON.parse(localStorage.getItem('cart')) || [];
    
    if (index >= 0 && index < cart.length) {
        let item = cart[index];
        let currentQty = item.Quantity || item.quantity || 1;
        
        if (newValue !== null) {
            // C·∫≠p nh·∫≠t t·ª´ input field
            currentQty = parseInt(newValue) || 1;
        } else {
            // C·∫≠p nh·∫≠t t·ª´ n√∫t +/- 
            currentQty = Math.max(1, currentQty + change);
        }
        
        // C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng v√† t·ªïng ti·ªÅn
        if (item.Quantity !== undefined) {
            // D·ªØ li·ªáu m·ªõi
            item.Quantity = currentQty;
            item.Subtotal = item.UnitPrice * currentQty;
        } else if (item.quantity !== undefined) {
            // D·ªØ li·ªáu c≈©
            item.quantity = currentQty;
            item.totalPrice = item.basePrice * currentQty;
        }
        
        // L∆∞u l·∫°i v√†o localStorage
        localStorage.setItem('cart', JSON.stringify(cart));
        
        // Re-render gi·ªè h√†ng
        renderCart();
        
        console.log(`ƒê√£ c·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng item ${index} th√†nh ${currentQty}`);
    }
}
document.addEventListener('DOMContentLoaded', renderCart);
</script>
} 