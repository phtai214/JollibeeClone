@{
    ViewData["Title"] = "G√† Gi√≤n Vui V·∫ª";
}

@section Styles {
    <link rel="stylesheet" href="~/css/menu-common.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/css/menu-card-common.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/css/ga-gion-vui-ve.css" asp-append-version="true" />
}

<div class="ga-gion-hero">
    <div class="ga-gion-hero-content">
        <h1>G√† Gi√≤n Vui V·∫ª</h1>
        <p>Th∆∞·ªüng th·ª©c g√† r√°n gi√≤n tan, ƒë·∫≠m ƒë√† h∆∞∆°ng v·ªã t·∫°i Jollibee!</p>
    </div>
</div>

<div class="container py-5">
    <div class="row" id="menuList">
        <!-- Menu items will be dynamically populated -->
    </div>
</div>

<!-- Modal for product options -->
<div class="modal fade" id="orderOptionsModal" tabindex="-1" aria-labelledby="orderOptionsModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-lg">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="orderOptionsModalLabel">T√πy ch·ªçn combo</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <form id="orderOptionsForm">
          <!-- Options will be dynamically populated -->
        </form>
      </div>
      <div class="modal-footer">
        <div class="d-flex justify-content-between align-items-center w-100">
          <div class="total-price-display">
            <span class="text-muted">T·ªïng ti·ªÅn:</span>
            <span class="fw-bold text-danger fs-4" id="comboTotalPrice">0ƒë</span>
          </div>
          <div>
            <button type="button" class="btn btn-secondary me-2" data-bs-dismiss="modal">ƒê√≥ng</button>
            <button type="button" class="btn btn-danger" id="addToCartBtn">
              <i class="fas fa-shopping-cart"></i> Th√™m v√†o gi·ªè h√†ng
            </button>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<style>
    /* Combo price styling */
    .price-container {
        margin-bottom: 1.2rem;
        position: relative;
        transition: transform 0.2s ease;
    }
    
    .menu-card:hover .price-container {
        transform: scale(1.05);
    }
    
    .original-price {
        color: #999;
        font-size: 1rem;
        text-decoration: line-through;
        margin-bottom: 0.3rem;
        font-weight: 500;
    }
    
    .current-price {
        color: #ff9800;
        font-size: 1.3rem;
        font-weight: bold;
        letter-spacing: 0.5px;
        display: inline-block;
        margin-right: 8px;
    }
    
    .discount-badge {
        display: inline-block;
        background: #ffc107;
        color: #333;
        padding: 2px 6px;
        border-radius: 8px;
        font-size: 0.8rem;
        font-weight: bold;
        vertical-align: middle;
        margin-left: 4px;
    }
    
    @@media (max-width: 768px) {
        .original-price {
            font-size: 0.9rem;
        }
        .current-price {
            font-size: 1.2rem;
        }
        .discount-badge {
            font-size: 0.75rem;
            padding: 1px 4px;
        }
    }
</style>

@section Scripts {
    <script>
        function renderMenuList(menuItems) {
            const menuList = document.getElementById('menuList');
            menuList.innerHTML = menuItems.map(item => {
                const isCombo = item.isConfigurable;
                const buttonClass = isCombo ? 'btn btn-order' : 'btn btn-order-simple';
                const buttonAttributes = isCombo 
                    ? `data-product-id="${item.productID}" data-bs-toggle="modal" data-bs-target="#orderOptionsModal"` 
                    : `data-product-id="${item.productID}" data-product-name="${item.productName}" data-product-price="${item.price}"`;
                
                // S·ª≠ d·ª•ng gi√° th·∫≠t t·ª´ database
                let priceHTML = '';
                if (isCombo && item.originalPrice && item.originalPrice > item.price) {
                    const currentPrice = item.price;
                    const originalPrice = item.originalPrice;
                    const discountPercent = Math.round(((originalPrice - currentPrice) / originalPrice) * 100);
                    
                    priceHTML = `
                        <div class="price-container">
                            <div class="original-price">${originalPrice.toLocaleString()} ƒë</div>
                            <div class="current-price">${currentPrice.toLocaleString()} ƒë</div>
                            <div class="discount-badge">-${discountPercent}%</div>
                        </div>
                    `;
                } else {
                    priceHTML = `<div class="menu-price">${item.price.toLocaleString()} ƒë</div>`;
                }
                
                return `
                    <div class="col-md-6 col-lg-4">
                        <div class="menu-card">
                            ${isCombo ? '<div class="combo-badge">COMBO</div>' : ''}
                            <img src="${item.imageUrl || item.thumbnailUrl || '/assets/images/default.png'}" alt="${item.productName}" class="menu-img">
                            <div class="menu-content">
                                <h3>${item.productName}</h3>
                                <div class="menu-info">${item.shortDescription || ''}</div>
                                ${priceHTML}
                                <button class="${buttonClass}" ${buttonAttributes}>
                                    ${isCombo ? 'T√ôY CH·ªåN' : 'ƒê·∫∂T H√ÄNG'}
                                </button>
                            </div>
                        </div>
                    </div>
                `;
            }).join('');
        }

        // L·∫•y danh s√°ch s·∫£n ph·∫©m G√† Gi√≤n Vui V·∫ª t·ª´ API
        fetch('/Menu/GetGaGionVuiVeItems')
            .then(res => res.json())
            .then(data => {
                console.log('üì¶ Loaded G√† Gi√≤n Vui V·∫ª menu items:', data);
                renderMenuList(data);
            })
            .catch(err => {
                console.error('‚ùå Error loading G√† Gi√≤n Vui V·∫ª menu items:', err);
                document.getElementById('menuList').innerHTML = '<div class="text-danger">Kh√¥ng th·ªÉ t·∫£i danh s√°ch s·∫£n ph·∫©m!</div>';
            });

        // Render ƒë·ªông c√°c nh√≥m c·∫•u h√¨nh v√† option v√†o modal
        function renderComboOptions(combo) {
            const form = document.getElementById('orderOptionsForm');
            if (!combo || !combo.groups || combo.groups.length === 0) {
                form.innerHTML = '<div class="text-danger">Kh√¥ng c√≥ t√πy ch·ªçn cho combo n√†y.</div>';
                return;
            }
            
            // Store combo data globally for price calculation
            window.currentCombo = combo;
            
            let html = '';
            combo.groups.forEach((group, groupIdx) => {
                html += `<div class="mb-3">
                    <label class="form-label fw-bold">${group.groupName}</label>
                    <div>`;
                group.options.forEach((option, optIdx) => {
                    const inputId = `group${group.configGroupID}-option${option.configOptionID}`;
                    const checked = option.isDefault || optIdx === 0 ? 'checked' : '';
                    html += `
                        <input type="radio" class="btn-check option-radio" name="group${group.configGroupID}" id="${inputId}" 
                               data-price="${option.priceAdjustment || 0}" autocomplete="off" ${checked}
                               onchange="updateComboPrice()">
                        <label class="btn btn-outline-danger mb-2" for="${inputId}">
                            ${option.productImage ? `<img src="${option.productImage}" alt="${option.productName}" width="50">` : ''}
                            ${option.productName}
                            ${option.variantName ? `(${option.variantName})` : ''}
                            ${option.priceAdjustment && option.priceAdjustment > 0 ? `(+${option.priceAdjustment.toLocaleString()}ƒë)` : ''}
                        </label>`;
                });
                html += '</div></div>';
            });
            // S·ªë l∆∞·ª£ng
            html += `<div class="mb-3">
                <label class="form-label fw-bold">S·ªë l∆∞·ª£ng</label>
                <div class="input-group" style="max-width: 150px;">
                  <button class="btn btn-outline-secondary" type="button" id="qtyMinus" onclick="changeQuantity(-1)">-</button>
                  <input type="number" class="form-control text-center" id="orderQty" value="1" min="1" onchange="updateComboPrice()">
                  <button class="btn btn-outline-secondary" type="button" id="qtyPlus" onclick="changeQuantity(1)">+</button>
                </div>
              </div>`;
            form.innerHTML = html;
            
            // Calculate initial price
            updateComboPrice();
        }

        // Calculate and update combo total price
        function updateComboPrice() {
            if (!window.currentCombo) {
                console.warn('‚ö†Ô∏è No current combo data');
                return;
            }
            
            const basePrice = window.currentCombo.basePrice || 0;
            console.log('üí∞ Calculating combo price:');
            console.log('üí∞ Current combo:', window.currentCombo);
            console.log('üí∞ Base price:', basePrice);
            
            if (basePrice === 0) {
                console.warn('‚ö†Ô∏è No base price found for combo:', window.currentCombo);
            }
            let totalPrice = basePrice;
            
            // Add price adjustments from selected options
            const selectedRadios = document.querySelectorAll('.option-radio:checked');
            let totalAdjustments = 0;
            selectedRadios.forEach(radio => {
                const priceAdjustment = parseFloat(radio.getAttribute('data-price')) || 0;
                totalAdjustments += priceAdjustment;
                totalPrice += priceAdjustment;
                console.log('üí∞ Option adjustment:', priceAdjustment, 'from radio:', radio);
            });
            
            // Multiply by quantity
            const quantity = parseInt(document.getElementById('orderQty').value) || 1;
            totalPrice *= quantity;
            
            console.log('üí∞ Final calculation: basePrice=' + basePrice + ' + adjustments=' + totalAdjustments + ' √ó quantity=' + quantity + ' = ' + totalPrice);
            
            // Update display
            document.getElementById('comboTotalPrice').textContent = totalPrice.toLocaleString() + 'ƒë';
        }

        // Change quantity helper function
        function changeQuantity(delta) {
            const qtyInput = document.getElementById('orderQty');
            let currentQty = parseInt(qtyInput.value) || 1;
            const newQty = Math.max(1, currentQty + delta);
            qtyInput.value = newQty;
            updateComboPrice();
        }

        // Render ƒë·ªông c√°c nh√≥m c·∫•u h√¨nh v√† option v√†o modal
        function renderComboOptions(combo) {
            const form = document.getElementById('orderOptionsForm');
            if (!combo || !combo.groups || combo.groups.length === 0) {
                form.innerHTML = '<div class="text-danger">Kh√¥ng c√≥ t√πy ch·ªçn cho combo n√†y.</div>';
                return;
            }
            
            // Store combo data globally for price calculation
            window.currentCombo = combo;
            
            let html = '';
            combo.groups.forEach((group, groupIdx) => {
                html += `<div class="mb-3">
                    <label class="form-label fw-bold">${group.groupName}</label>
                    <div>`;
                group.options.forEach((option, optIdx) => {
                    const inputId = `group${group.configGroupID}-option${option.configOptionID}`;
                    const checked = option.isDefault || optIdx === 0 ? 'checked' : '';
                    html += `
                        <input type="radio" class="btn-check option-radio" name="group${group.configGroupID}" id="${inputId}" 
                               data-price="${option.priceAdjustment || 0}" autocomplete="off" ${checked}
                               onchange="updateComboPrice()">
                        <label class="btn btn-outline-danger mb-2" for="${inputId}">
                            ${option.productImage ? `<img src="${option.productImage}" alt="${option.productName}" width="50">` : ''}
                            ${option.productName}
                            ${option.variantName ? `(${option.variantName})` : ''}
                            ${option.priceAdjustment && option.priceAdjustment > 0 ? `(+${option.priceAdjustment.toLocaleString()}ƒë)` : ''}
                        </label>`;
                });
                html += '</div></div>';
            });
            // S·ªë l∆∞·ª£ng
            html += `<div class="mb-3">
                <label class="form-label fw-bold">S·ªë l∆∞·ª£ng</label>
                <div class="input-group" style="max-width: 150px;">
                  <button class="btn btn-outline-secondary" type="button" id="qtyMinus" onclick="changeQuantity(-1)">-</button>
                  <input type="number" class="form-control text-center" id="orderQty" value="1" min="1" onchange="updateComboPrice()">
                  <button class="btn btn-outline-secondary" type="button" id="qtyPlus" onclick="changeQuantity(1)">+</button>
                </div>
              </div>`;
            form.innerHTML = html;
            
            // Calculate initial price
            updateComboPrice();
        }

        // Global variable to store current product being configured
        let currentProductId = null;

        // Update the event listener for order buttons to handle both combo and regular products
        document.addEventListener('click', function(e) {
            if (e.target && e.target.classList.contains('btn-order')) {
                // Handle combo products (open modal)
                currentProductId = parseInt(e.target.getAttribute('data-product-id'));
                
                // Reset modal title
                document.getElementById('orderOptionsModalLabel').textContent = 'T√πy ch·ªçn combo';
                
                const productId = e.target.getAttribute('data-product-id');
                fetch(`/Menu/GetComboOptions?productId=${productId}`)
                    .then(res => res.json())
                    .then(data => {
                        if (data && data.productName) {
                            document.getElementById('orderOptionsModalLabel').textContent = `T√πy ch·ªçn - ${data.productName}`;
                        }
                        
                        // Store base product info for price calculation BEFORE rendering
                        const productCard = e.target.closest('.menu-card');
                        // For combo products, get current price; for regular products, get menu price
                        const priceElement = productCard.querySelector('.current-price') || productCard.querySelector('.menu-price');
                        const priceText = priceElement.textContent;
                        const basePrice = parseInt(priceText.replace(/[^\d]/g, ''));
                        
                        console.log('üè∑Ô∏è Product card price text:', priceText);
                        console.log('üè∑Ô∏è Parsed base price:', basePrice);
                        
                        // Add basePrice to data before storing
                        if (data) {
                            data.basePrice = basePrice;
                        }
                        
                        renderComboOptions(data);
                    })
                    .catch(err => {
                        document.getElementById('orderOptionsForm').innerHTML = '<div class="text-danger">Kh√¥ng th·ªÉ t·∫£i t√πy ch·ªçn combo!</div>';
                    });
            } else if (e.target && e.target.classList.contains('btn-order-simple')) {
                // Handle regular products (add directly to cart)
                const productId = parseInt(e.target.getAttribute('data-product-id'));
                const productName = e.target.getAttribute('data-product-name');
                const productPrice = e.target.getAttribute('data-product-price');
                
                // Disable button temporarily
                const originalText = e.target.innerHTML;
                e.target.disabled = true;
                e.target.innerHTML = '<i class="fas fa-spinner fa-spin"></i> ƒêang th√™m...';
                
                // Add to cart with no configuration options
                console.log('üõí Adding regular product to cart:', {productId, productName, productPrice});
                
                window.jollibeeCart.addToCart(productId, 1, [])
                    .then(success => {
                        console.log('üõí Add to cart result:', success);
                        if (success) {
                            // Show success feedback
                            e.target.innerHTML = '<i class="fas fa-check"></i> ƒê√£ th√™m!';
                            setTimeout(() => {
                                e.target.innerHTML = originalText;
                                e.target.disabled = false;
                            }, 1500);
                        } else {
                            alert('Kh√¥ng th·ªÉ th√™m v√†o gi·ªè h√†ng. Vui l√≤ng th·ª≠ l·∫°i.');
                            e.target.innerHTML = originalText;
                            e.target.disabled = false;
                        }
                    })
                    .catch(error => {
                        console.error('‚ùå Error adding regular product to cart:', error);
                        alert('C√≥ l·ªói x·∫£y ra. Vui l√≤ng th·ª≠ l·∫°i.');
                        e.target.innerHTML = originalText;
                        e.target.disabled = false;
                    });
            }
        });

        // Add to cart functionality
        document.getElementById('addToCartBtn').addEventListener('click', async function() {
            // Check if we're in editing mode (cart edit) or adding new item
            const isEditingMode = window.jollibeeCart && window.jollibeeCart.editingCartItemId;
            
            if (isEditingMode) {
                // Call cart's save method for editing
                await window.jollibeeCart.saveItemChanges();
                return;
            }
            
            // Regular add to cart flow
            if (!currentProductId) {
                alert('Vui l√≤ng ch·ªçn s·∫£n ph·∫©m');
                return;
            }

            // Get quantity
            const quantity = parseInt(document.getElementById('orderQty').value) || 1;
            
            // Get selected options
            const selectedOptions = [];
            const form = document.getElementById('orderOptionsForm');
            const radioGroups = form.querySelectorAll('input[type="radio"]:checked');
            
            radioGroups.forEach(radio => {
                const optionData = radio.id.match(/group(\d+)-option(\d+)/);
                if (optionData) {
                    const configGroupID = parseInt(optionData[1]);
                    const configOptionID = parseInt(optionData[2]);
                    selectedOptions.push({
                        ConfigGroupID: configGroupID,
                        ConfigOptionID: configOptionID,
                        OptionProductID: 0, // Will be populated by backend
                        VariantID: null // Will be populated by backend
                    });
                }
            });

            // Disable button to prevent double-click
            this.disabled = true;
            this.innerHTML = '<i class="fas fa-spinner fa-spin"></i> ƒêang th√™m...';

            try {
                // Add to cart using global cart instance
                const success = await window.jollibeeCart.addToCart(currentProductId, quantity, selectedOptions);
                
                if (success) {
                    // Close modal
                    const modal = bootstrap.Modal.getInstance(document.getElementById('orderOptionsModal'));
                    modal.hide();
                    
                    // Reset form
                    currentProductId = null;
                } else {
                    alert('Kh√¥ng th·ªÉ th√™m v√†o gi·ªè h√†ng. Vui l√≤ng th·ª≠ l·∫°i.');
                }
            } catch (error) {
                console.error('Error adding to cart:', error);
                alert('C√≥ l·ªói x·∫£y ra. Vui l√≤ng th·ª≠ l·∫°i.');
            } finally {
                // Re-enable button
                this.disabled = false;
                this.innerHTML = '<i class="fas fa-shopping-cart"></i> Th√™m v√†o gi·ªè h√†ng';
            }
        });
    </script>
} 