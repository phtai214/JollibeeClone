@{
    ViewData["Title"] = "Th·ª©c U·ªëng";
}

@section Styles {
    <link rel="stylesheet" href="~/css/thuc-uong.css" asp-append-version="true" />
}

<div class="menu-hero">
    <div class="menu-hero-content">
        <h1>Th·ª©c U·ªëng</h1>
        <p>Nh·ªØng th·ª©c u·ªëng gi·∫£i kh√°t tuy·ªát v·ªùi ƒë·ªÉ ho√†n thi·ªán b·ªØa ƒÉn c·ªßa b·∫°n t·∫°i Jollibee!</p>
    </div>
</div>

<div class="container py-5">
    <div class="row" id="menuList">
        <!-- Menu items will be dynamically populated -->
    </div>
</div>

<!-- Modal for product options -->
<div class="modal fade" id="orderOptionsModal" tabindex="-1" aria-labelledby="orderOptionsModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-lg">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="orderOptionsModalLabel">T√πy ch·ªçn combo</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <form id="orderOptionsForm">
          <!-- Configuration options will be dynamically populated -->
        </form>
      </div>
      <div class="modal-footer">
        <div class="d-flex justify-content-between align-items-center w-100">
          <div class="quantity-controls">
            <button type="button" class="btn btn-outline-secondary btn-sm" onclick="changeQuantity(-1)">‚àí</button>
            <input type="number" class="form-control quantity-input" id="orderQty" value="1" min="1" readonly>
            <button type="button" class="btn btn-outline-secondary btn-sm" onclick="changeQuantity(1)">+</button>
          </div>
          <div class="total-price-display">
            <span class="text-muted">T·ªïng ti·ªÅn:</span>
            <span class="fw-bold text-danger fs-4" id="comboTotalPrice">0ƒë</span>
          </div>
          <div>
            <button type="button" class="btn btn-secondary me-2" data-bs-dismiss="modal">ƒê√≥ng</button>
            <button type="button" class="btn btn-danger" id="addToCartBtn">
              <i class="fas fa-shopping-cart"></i> Th√™m v√†o gi·ªè h√†ng
            </button>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

@section Scripts {
    <script>
        function renderMenuList(menuItems) {
            const menuList = document.getElementById('menuList');
            
            if (!menuItems || menuItems.length === 0) {
                menuList.innerHTML = '<div class="col-12"><div class="alert alert-warning text-center">Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m n√†o trong danh m·ª•c Th·ª©c u·ªëng!</div></div>';
                return;
            }
            
            menuList.innerHTML = menuItems.map(item => {
                const isCombo = item.isConfigurable;
                const buttonClass = isCombo ? 'btn btn-order' : 'btn btn-order-simple';
                const buttonAttributes = isCombo 
                    ? `data-product-id="${item.productID}" data-bs-toggle="modal" data-bs-target="#orderOptionsModal"` 
                    : `data-product-id="${item.productID}" data-product-name="${item.productName}" data-product-price="${item.price}"`;
                
                return `
                    <div class="col-md-6 col-lg-4">
                        <div class="menu-card">
                            ${isCombo ? '<div class="combo-badge">COMBO</div>' : ''}
                            <img src="${item.imageUrl || item.thumbnailUrl || '/assets/images/default.png'}" alt="${item.productName}" class="menu-img">
                            <div class="menu-content">
                                <h3>${item.productName}</h3>
                                <div class="menu-info">${item.shortDescription || ''}</div>
                                <div class="menu-price">${item.price.toLocaleString()} ƒë</div>
                                <button class="${buttonClass}" ${buttonAttributes}>
                                    ${isCombo ? 'T√πy Ch·ªçn' : 'ƒê·∫∑t H√†ng'}
                                </button>
                            </div>
                        </div>
                    </div>
                `;
            }).join('');
        }

        // L·∫•y danh s√°ch t·∫•t c·∫£ s·∫£n ph·∫©m Th·ª©c u·ªëng t·ª´ API
        fetch('/Menu/GetThucUongItems')
            .then(res => res.json())
            .then(data => {
                console.log('üì¶ Loaded Th·ª©c u·ªëng menu items:', data);
                renderMenuList(data);
            })
            .catch(err => {
                console.error('‚ùå Error loading Th·ª©c u·ªëng menu items:', err);
                document.getElementById('menuList').innerHTML = '<div class="text-danger">Kh√¥ng th·ªÉ t·∫£i danh s√°ch s·∫£n ph·∫©m!</div>';
            });

        // Render ƒë·ªông c√°c nh√≥m c·∫•u h√¨nh v√† option v√†o modal
        function renderComboOptions(combo) {
            const form = document.getElementById('orderOptionsForm');
            if (!combo || !combo.groups || combo.groups.length === 0) {
                form.innerHTML = '<div class="text-danger">Kh√¥ng c√≥ t√πy ch·ªçn cho combo n√†y.</div>';
                return;
            }
            
            // Store combo data globally for price calculation
            window.currentCombo = combo;
            
            let html = '';
            combo.groups.forEach((group, groupIndex) => {
                html += `
                    <div class="mb-3">
                        <label class="form-label fw-bold">${group.groupName}</label>
                        <div>
                `;
                
                group.options.forEach((option, optionIndex) => {
                    const isChecked = option.isDefault ? 'checked' : '';
                    const priceText = option.priceAdjustment > 0 ? ` (+${option.priceAdjustment.toLocaleString()}ƒë)` : '';
                    
                    html += `
                        <input type="radio" class="btn-check" name="group${group.configGroupID}" 
                               id="group${group.configGroupID}-option${option.configOptionID}" 
                               data-price-adjustment="${option.priceAdjustment}" 
                               autocomplete="off" ${isChecked}>
                        <label class="btn btn-outline-danger mb-2" for="group${group.configGroupID}-option${option.configOptionID}">
                            ${option.optionProduct.thumbnailUrl ? `<img src="${option.optionProduct.thumbnailUrl}" alt="${option.optionProduct.productName}" width="50">` : ''}
                            ${option.optionProduct.productName}${priceText}
                        </label>
                    `;
                });
                
                html += `
                        </div>
                    </div>
                `;
            });
            
            form.innerHTML = html;
            
            // Add event listeners to radio buttons for price calculation
            form.querySelectorAll('input[type="radio"]').forEach(radio => {
                radio.addEventListener('change', updateComboPrice);
            });
            
            // Initial price calculation
            updateComboPrice();
        }

        // Update combo price based on selected options
        function updateComboPrice() {
            if (!window.currentCombo) return;
            
            const basePrice = window.currentCombo.price;
            let totalAdjustment = 0;
            
            // Calculate total price adjustment from selected options
            const selectedOptions = document.querySelectorAll('#orderOptionsForm input[type="radio"]:checked');
            selectedOptions.forEach(option => {
                const adjustment = parseFloat(option.dataset.priceAdjustment) || 0;
                totalAdjustment += adjustment;
            });
            
            // Get quantity
            const quantity = parseInt(document.getElementById('orderQty').value) || 1;
            
            // Calculate total price
            const totalPrice = (basePrice + totalAdjustment) * quantity;
            
            // Update price display
            document.getElementById('comboTotalPrice').textContent = totalPrice.toLocaleString() + 'ƒë';
        }

        // Change quantity helper function
        function changeQuantity(delta) {
            const qtyInput = document.getElementById('orderQty');
            let currentQty = parseInt(qtyInput.value) || 1;
            const newQty = Math.max(1, currentQty + delta);
            qtyInput.value = newQty;
            updateComboPrice();
        }

        // Global variable to store current product being configured
        let currentProductId = null;

        // Update the event listener for order buttons to handle both combo and regular products
        document.addEventListener('click', function(e) {
            if (e.target && e.target.classList.contains('btn-order')) {
                // Handle combo products (open modal)
                currentProductId = parseInt(e.target.getAttribute('data-product-id'));
                
                // Reset modal title
                document.getElementById('orderOptionsModalLabel').textContent = 'T√πy ch·ªçn combo';
                
                const productId = e.target.getAttribute('data-product-id');
                console.log('üéØ Opening combo modal for product:', productId);
                
                // Fetch combo configuration
                fetch(`/Menu/GetComboConfig?productId=${productId}`)
                    .then(response => response.json())
                    .then(data => {
                        console.log('‚öôÔ∏è Combo config received:', data);
                        if (data && data.success) {
                            renderComboOptions(data.combo);
                        } else {
                            console.error('‚ùå Failed to load combo config:', data);
                            document.getElementById('orderOptionsForm').innerHTML = '<div class="text-danger">Kh√¥ng th·ªÉ t·∫£i c·∫•u h√¨nh combo!</div>';
                        }
                    })
                    .catch(error => {
                        console.error('‚ùå Error loading combo config:', error);
                        document.getElementById('orderOptionsForm').innerHTML = '<div class="text-danger">C√≥ l·ªói x·∫£y ra khi t·∫£i c·∫•u h√¨nh combo!</div>';
                    });
                
            } else if (e.target && e.target.classList.contains('btn-order-simple')) {
                // Handle regular products (add directly to cart)
                const productId = e.target.getAttribute('data-product-id');
                const productName = e.target.getAttribute('data-product-name');
                const productPrice = parseFloat(e.target.getAttribute('data-product-price'));
                
                // Store original button text
                const originalText = e.target.innerHTML;
                
                // Disable button and show loading
                e.target.disabled = true;
                e.target.innerHTML = '<i class="fas fa-spinner fa-spin"></i> ƒêang th√™m...';
                
                // Add to cart with no configuration options
                console.log('üõí Adding regular product to cart:', {productId, productName, productPrice});
                
                window.jollibeeCart.addToCart(productId, 1, [])
                    .then(success => {
                        console.log('üõí Add to cart result:', success);
                        if (success) {
                            // Show success feedback
                            e.target.innerHTML = '<i class="fas fa-check"></i> ƒê√£ th√™m!';
                            setTimeout(() => {
                                e.target.innerHTML = originalText;
                                e.target.disabled = false;
                            }, 1500);
                        } else {
                            alert('Kh√¥ng th·ªÉ th√™m v√†o gi·ªè h√†ng. Vui l√≤ng th·ª≠ l·∫°i.');
                            e.target.innerHTML = originalText;
                            e.target.disabled = false;
                        }
                    })
                    .catch(error => {
                        console.error('‚ùå Error adding regular product to cart:', error);
                        alert('C√≥ l·ªói x·∫£y ra. Vui l√≤ng th·ª≠ l·∫°i.');
                        e.target.innerHTML = originalText;
                        e.target.disabled = false;
                    });
            }
        });

        // Add to cart functionality
        document.getElementById('addToCartBtn').addEventListener('click', async function() {
            // Check if we're in editing mode (cart edit) or adding new item
            const isEditingMode = window.jollibeeCart && window.jollibeeCart.editingCartItemId;
            
            if (isEditingMode) {
                // Call cart's save method for editing
                await window.jollibeeCart.saveItemChanges();
                return;
            }
            
            // Regular add to cart flow
            if (!currentProductId) {
                alert('Vui l√≤ng ch·ªçn s·∫£n ph·∫©m');
                return;
            }

            // Get quantity
            const quantity = parseInt(document.getElementById('orderQty').value) || 1;
            
            // Get selected options
            const selectedOptions = [];
            const form = document.getElementById('orderOptionsForm');
            const radioGroups = form.querySelectorAll('input[type="radio"]:checked');
            
            radioGroups.forEach(radio => {
                const optionData = radio.id.match(/group(\d+)-option(\d+)/);
                if (optionData) {
                    const configGroupID = parseInt(optionData[1]);
                    const configOptionID = parseInt(optionData[2]);
                    selectedOptions.push({
                        ConfigGroupID: configGroupID,
                        ConfigOptionID: configOptionID,
                        OptionProductID: 0, // Will be populated by backend
                        VariantID: null // Will be populated by backend
                    });
                }
            });

            // Disable button to prevent double-click
            this.disabled = true;
            this.innerHTML = '<i class="fas fa-spinner fa-spin"></i> ƒêang th√™m...';

            try {
                // Add to cart using global cart instance
                const success = await window.jollibeeCart.addToCart(currentProductId, quantity, selectedOptions);
                
                if (success) {
                    // Close modal
                    const modal = bootstrap.Modal.getInstance(document.getElementById('orderOptionsModal'));
                    modal.hide();
                    
                    // Reset form
                    currentProductId = null;
                } else {
                    alert('Kh√¥ng th·ªÉ th√™m v√†o gi·ªè h√†ng. Vui l√≤ng th·ª≠ l·∫°i.');
                }
            } catch (error) {
                console.error('Error adding to cart:', error);
                alert('C√≥ l·ªói x·∫£y ra. Vui l√≤ng th·ª≠ l·∫°i.');
            } finally {
                // Re-enable button
                this.disabled = false;
                this.innerHTML = '<i class="fas fa-shopping-cart"></i> Th√™m v√†o gi·ªè h√†ng';
            }
        });
    </script>
} 