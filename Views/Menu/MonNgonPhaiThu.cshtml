@{
    ViewData["Title"] = "Món Ngon Phải Thử";
}

<div class="menu-hero">
    <div class="menu-hero-content">
        <h1>Món Ngon Phải Thử</h1>
        <p>Khám phá những món ăn đặc sắc không thể bỏ lỡ tại Jollibee!</p>
    </div>
</div>

<div class="container py-5">
    <div class="row" id="menuList">
        <!-- Menu items will be dynamically populated -->
    </div>
</div>

<!-- Modal for product options -->
<div class="modal fade" id="orderOptionsModal" tabindex="-1" aria-labelledby="orderOptionsModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-lg">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="orderOptionsModalLabel">Tùy chọn combo</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <form id="orderOptionsForm">
          <div class="mb-3">
            <label class="form-label fw-bold">Chọn Gà 1</label>
            <div>
              <input type="radio" class="btn-check" name="chicken1" id="chicken1-1" autocomplete="off" checked>
              <label class="btn btn-outline-danger mb-2" for="chicken1-1">
                <img src="/assets/images/ga_gion_vui_ve.png" alt="Gà Giòn Vui Vẻ" width="50"> Gà Giòn Vui Vẻ
              </label>
              <input type="radio" class="btn-check" name="chicken1" id="chicken1-2" autocomplete="off">
              <label class="btn btn-outline-danger mb-2" for="chicken1-2">
                <img src="/assets/images/ga_sot_cay.png" alt="Gà Sốt Cay" width="50"> Gà Sốt Cay (+2,000đ)
              </label>
            </div>
          </div>
          <div class="mb-3">
            <label class="form-label fw-bold">Chọn Mỳ Ý 1</label>
            <div>
              <input type="radio" class="btn-check" name="spaghetti1" id="spaghetti1-1" autocomplete="off" checked>
              <label class="btn btn-outline-danger mb-2" for="spaghetti1-1">
                <img src="/assets/images/mi_y_jolly.png" alt="Mì Ý Jolly vừa" width="50"> Mì Ý Jolly vừa
              </label>
              <input type="radio" class="btn-check" name="spaghetti1" id="spaghetti1-2" autocomplete="off">
              <label class="btn btn-outline-danger mb-2" for="spaghetti1-2">
                <img src="/assets/images/mi_y_jolly.png" alt="Mì Ý Jolly lớn" width="50"> Mì Ý Jolly lớn (+10,000đ)
              </label>
            </div>
          </div>
          <div class="mb-3">
            <label class="form-label fw-bold">Chọn Burger</label>
            <div>
              <input type="radio" class="btn-check" name="burger" id="burger1" autocomplete="off" checked>
              <label class="btn btn-outline-danger mb-2" for="burger1">
                <img src="/assets/images/burger_com.png" alt="Burger Tôm" width="50"> Burger Tôm
              </label>
            </div>
          </div>
          <div class="mb-3">
            <label class="form-label fw-bold">Chọn Khoai Tây</label>
            <div>
              <input type="radio" class="btn-check" name="fries" id="fries1" autocomplete="off" checked>
              <label class="btn btn-outline-danger mb-2" for="fries1">
                <img src="/assets/images/khoai_menu.jpg" alt="Khoai Tây Chiên" width="50"> Khoai Tây Chiên vừa
              </label>
            </div>
          </div>
          <div class="mb-3">
            <label class="form-label fw-bold">Chọn Nước Uống</label>
            <div>
              <input type="radio" class="btn-check" name="drink" id="drink1" autocomplete="off" checked>
              <label class="btn btn-outline-danger mb-2" for="drink1">
                <img src="/assets/images/pepsi_to.png" alt="Pepsi Lớn" width="50"> Pepsi Lớn
              </label>
            </div>
          </div>
          <div class="mb-3">
            <label class="form-label fw-bold">Quà tặng</label>
            <div>
              <input type="radio" class="btn-check" name="gift" id="gift1" autocomplete="off" checked>
              <label class="btn btn-outline-danger mb-2" for="gift1">
                <img src="/assets/images/tuideocheo_mini.jpg" alt="Túi đeo chéo" width="50"> Túi đeo chéo Jollibee
              </label>
            </div>
          </div>
          <div class="mb-3">
            <label class="form-label fw-bold">Số lượng</label>
            <div class="input-group" style="max-width: 150px;">
              <button class="btn btn-outline-secondary" type="button" id="qtyMinus">-</button>
              <input type="number" class="form-control text-center" id="orderQty" value="1" min="1">
              <button class="btn btn-outline-secondary" type="button" id="qtyPlus">+</button>
            </div>
          </div>
        </form>
      </div>
      <div class="modal-footer">
        <div class="d-flex justify-content-between align-items-center w-100">
          <div class="total-price-display">
            <span class="text-muted">Tổng tiền:</span>
            <span class="fw-bold text-danger fs-4" id="comboTotalPrice">0đ</span>
          </div>
          <div>
            <button type="button" class="btn btn-secondary me-2" data-bs-dismiss="modal">Đóng</button>
            <button type="button" class="btn btn-danger" id="addToCartBtn">
              <i class="fas fa-shopping-cart"></i> Thêm vào giỏ hàng
            </button>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<style>
    body {
        background: #f8f9fa;
    }
    .menu-hero {
        background: linear-gradient(120deg, #ffb347 0%, #ffcc33 100%), url('/assets/images/mon_ngon_phai_thu.png');
        background-blend-mode: multiply;
        background-size: cover;
        background-position: center;
        background-repeat: no-repeat;
        height: 350px;
        display: flex;
        align-items: center;
        justify-content: center;
        text-align: center;
        color: white;
        position: relative;
        margin: 0 -15px;
        width: calc(100% + 30px);
        border-radius: 0 0 32px 32px;
        box-shadow: 0 8px 32px rgba(255, 195, 0, 0.15);
    }
    .menu-hero-content {
        position: relative;
        z-index: 2;
        max-width: 800px;
        padding: 0 20px;
    }
    .menu-hero h1 {
        font-size: 3.2rem;
        font-weight: 800;
        margin-bottom: 1rem;
        text-shadow: 2px 2px 8px rgba(0,0,0,0.18);
        letter-spacing: 1px;
    }
    .menu-hero p {
        font-size: 1.35rem;
        margin-bottom: 2rem;
        text-shadow: 1px 1px 4px rgba(0,0,0,0.12);
        font-weight: 500;
    }
    .menu-card {
        background: #fff;
        border-radius: 24px;
        overflow: hidden;
        transition: box-shadow 0.3s, transform 0.3s;
        border: none;
        box-shadow: 0 4px 32px rgba(255, 195, 0, 0.10), 0 1.5px 8px rgba(227, 25, 55, 0.07);
        margin-bottom: 32px;
        position: relative;
    }
    .combo-badge {
        position: absolute;
        top: 12px;
        right: 12px;
        background: linear-gradient(45deg, #e31937, #ff9800);
        color: white;
        padding: 6px 12px;
        border-radius: 16px;
        font-size: 0.75rem;
        font-weight: 700;
        z-index: 2;
        text-transform: uppercase;
        letter-spacing: 0.5px;
        box-shadow: 0 2px 8px rgba(227, 25, 55, 0.3);
    }
    .menu-card:hover {
        transform: translateY(-6px) scale(1.03);
        box-shadow: 0 12px 40px rgba(227, 25, 55, 0.18), 0 2px 12px rgba(255, 195, 0, 0.12);
    }
    .menu-img {
        width: 100%;
        height: 220px;
        object-fit: cover;
        border-bottom: 2px solid #ffe082;
        background: #fffbe7;
    }
    .menu-content {
        padding: 2rem 1.5rem 1.5rem 1.5rem;
    }
    .menu-content h3 {
        color: #e31937;
        font-size: 1.35rem;
        margin-bottom: 0.75rem;
        font-weight: 700;
        letter-spacing: 0.5px;
    }
    .menu-info {
        color: #555;
        font-size: 1.05rem;
        line-height: 1.7;
        margin-bottom: 1.1rem;
        font-weight: 400;
    }
    .menu-price {
        color: #ff9800;
        font-size: 1.3rem;
        font-weight: bold;
        margin-bottom: 1.2rem;
        letter-spacing: 0.5px;
    }
    .btn-order, .btn-order-simple {
        background: linear-gradient(90deg, #e31937 0%, #ff9800 100%);
        color: #fff;
        border-radius: 30px;
        padding: 12px 36px;
        font-weight: bold;
        border: none;
        font-size: 1.1rem;
        box-shadow: 0 2px 8px rgba(227, 25, 55, 0.10);
        transition: background 0.3s, color 0.3s, box-shadow 0.3s;
        display: block;
        margin: 0 auto;
        min-width: 140px;
    }
    .btn-order:hover, .btn-order-simple:hover {
        background: linear-gradient(90deg, #ff9800 0%, #e31937 100%);
        color: #fffbe7;
        box-shadow: 0 4px 16px rgba(255, 195, 0, 0.18);
    }
    /* Modal modern style */
    .modal-content {
        border-radius: 24px;
        box-shadow: 0 8px 40px rgba(227, 25, 55, 0.10);
        border: none;
    }
    .modal-header {
        border-bottom: 1.5px solid #ffe082;
        background: linear-gradient(90deg, #fffbe7 0%, #fff3e0 100%);
        border-radius: 24px 24px 0 0;
    }
    .modal-title {
        color: #e31937;
        font-weight: 700;
        font-size: 1.4rem;
    }
    .modal-footer {
        border-top: 1.5px solid #ffe082;
        background: #fffbe7;
        border-radius: 0 0 24px 24px;
    }
    .btn-outline-danger {
        border-radius: 20px;
        border: 2px solid #e31937;
        color: #e31937;
        background: #fff;
        font-weight: 500;
        margin-right: 8px;
        margin-bottom: 8px;
        transition: background 0.2s, color 0.2s;
    }
    .btn-outline-danger.active, .btn-outline-danger:active, .btn-outline-danger:hover {
        background: linear-gradient(90deg, #e31937 0%, #ff9800 100%);
        color: #fff;
        border-color: #ff9800;
    }
    .btn-danger {
        background: linear-gradient(90deg, #e31937 0%, #ff9800 100%);
        border: none;
        color: #fff;
        font-weight: 600;
        border-radius: 30px;
        padding: 10px 32px;
        font-size: 1.1rem;
        box-shadow: 0 2px 8px rgba(227, 25, 55, 0.10);
        transition: background 0.3s, color 0.3s;
    }
    .btn-danger:hover {
        background: linear-gradient(90deg, #ff9800 0%, #e31937 100%);
        color: #fffbe7;
    }
    .btn-secondary {
        border-radius: 30px;
        font-weight: 500;
        background: #fffbe7;
        color: #e31937;
        border: 2px solid #ffe082;
        transition: background 0.2s, color 0.2s;
    }
    .btn-secondary:hover {
        background: #ffe082;
        color: #e31937;
    }
    .input-group .form-control {
        border-radius: 20px;
        border: 1.5px solid #ffe082;
        font-size: 1.1rem;
        font-weight: 500;
        color: #e31937;
        background: #fffbe7;
    }
    .input-group .btn-outline-secondary {
        border-radius: 20px;
        border: 2px solid #ff9800;
        color: #ff9800;
        background: #fff;
        font-weight: 600;
        transition: background 0.2s, color 0.2s;
    }
    .input-group .btn-outline-secondary:hover {
        background: #ff9800;
        color: #fff;
    }
    @@media (max-width: 768px) {
        .menu-hero {
            height: 220px;
            font-size: 1.2rem;
            border-radius: 0 0 18px 18px;
        }
        .menu-card {
            border-radius: 16px;
        }
        .modal-content {
            border-radius: 16px;
        }
    }
</style>

@section Scripts {
    <script>
        function renderMenuList(menuItems) {
            const menuList = document.getElementById('menuList');
            menuList.innerHTML = menuItems.map(item => {
                const isCombo = item.isConfigurable;
                const buttonClass = isCombo ? 'btn btn-order' : 'btn btn-order-simple';
                const buttonAttributes = isCombo 
                    ? `data-product-id="${item.productID}" data-bs-toggle="modal" data-bs-target="#orderOptionsModal"` 
                    : `data-product-id="${item.productID}" data-product-name="${item.productName}" data-product-price="${item.price}"`;
                
                return `
                    <div class="col-md-6 col-lg-4">
                        <div class="menu-card">
                            ${isCombo ? '<div class="combo-badge">COMBO</div>' : ''}
                            <img src="${item.imageUrl || item.thumbnailUrl || '/assets/images/default.png'}" alt="${item.productName}" class="menu-img">
                            <div class="menu-content">
                                <h3>${item.productName}</h3>
                                <div class="menu-info">${item.shortDescription || ''}</div>
                                <div class="menu-price">${item.price.toLocaleString()} đ</div>
                                <button class="${buttonClass}" ${buttonAttributes}>
                                    ${isCombo ? 'Tùy Chọn' : 'Đặt Hàng'}
                                </button>
                            </div>
                        </div>
                    </div>
                `;
            }).join('');
        }

        // Lấy danh sách tất cả sản phẩm từ API (cả combo và sản phẩm thường)
        fetch('/Menu/GetAllMenuItems')
            .then(res => res.json())
            .then(data => {
                console.log('📦 Loaded menu items:', data);
                renderMenuList(data);
            })
            .catch(err => {
                console.error('❌ Error loading menu items:', err);
                document.getElementById('menuList').innerHTML = '<div class="text-danger">Không thể tải danh sách sản phẩm!</div>';
            });

        // Render động các nhóm cấu hình và option vào modal
        function renderComboOptions(combo) {
            const form = document.getElementById('orderOptionsForm');
            if (!combo || !combo.groups || combo.groups.length === 0) {
                form.innerHTML = '<div class="text-danger">Không có tùy chọn cho combo này.</div>';
                return;
            }
            
            // Store combo data globally for price calculation
            window.currentCombo = combo;
            
            let html = '';
            combo.groups.forEach((group, groupIdx) => {
                html += `<div class="mb-3">
                    <label class="form-label fw-bold">${group.groupName}</label>
                    <div>`;
                group.options.forEach((option, optIdx) => {
                    const inputId = `group${group.configGroupID}-option${option.configOptionID}`;
                    const checked = option.isDefault || optIdx === 0 ? 'checked' : '';
                    html += `
                        <input type="radio" class="btn-check option-radio" name="group${group.configGroupID}" id="${inputId}" 
                               data-price="${option.priceAdjustment || 0}" autocomplete="off" ${checked}
                               onchange="updateComboPrice()">
                        <label class="btn btn-outline-danger mb-2" for="${inputId}">
                            ${option.productImage ? `<img src="${option.productImage}" alt="${option.productName}" width="50">` : ''}
                            ${option.productName}
                            ${option.variantName ? `(${option.variantName})` : ''}
                            ${option.priceAdjustment && option.priceAdjustment > 0 ? `(+${option.priceAdjustment.toLocaleString()}đ)` : ''}
                        </label>`;
                });
                html += '</div></div>';
            });
            // Số lượng
            html += `<div class="mb-3">
                <label class="form-label fw-bold">Số lượng</label>
                <div class="input-group" style="max-width: 150px;">
                  <button class="btn btn-outline-secondary" type="button" id="qtyMinus" onclick="changeQuantity(-1)">-</button>
                  <input type="number" class="form-control text-center" id="orderQty" value="1" min="1" onchange="updateComboPrice()">
                  <button class="btn btn-outline-secondary" type="button" id="qtyPlus" onclick="changeQuantity(1)">+</button>
                </div>
              </div>`;
            form.innerHTML = html;
            
            // Calculate initial price
            updateComboPrice();
        }

        // Calculate and update combo total price
        function updateComboPrice() {
            if (!window.currentCombo) {
                console.warn('⚠️ No current combo data');
                return;
            }
            
            const basePrice = window.currentCombo.basePrice || 0; // Use actual product price, no hardcode fallback
            console.log('💰 Calculating combo price:');
            console.log('💰 Current combo:', window.currentCombo);
            console.log('💰 Base price:', basePrice);
            
            if (basePrice === 0) {
                console.warn('⚠️ No base price found for combo:', window.currentCombo);
            }
            let totalPrice = basePrice;
            
            // Add price adjustments from selected options
            const selectedRadios = document.querySelectorAll('.option-radio:checked');
            let totalAdjustments = 0;
            selectedRadios.forEach(radio => {
                const priceAdjustment = parseFloat(radio.getAttribute('data-price')) || 0;
                totalAdjustments += priceAdjustment;
                totalPrice += priceAdjustment;
                console.log('💰 Option adjustment:', priceAdjustment, 'from radio:', radio);
            });
            
            // Multiply by quantity
            const quantity = parseInt(document.getElementById('orderQty').value) || 1;
            totalPrice *= quantity;
            
            console.log('💰 Final calculation: basePrice=' + basePrice + ' + adjustments=' + totalAdjustments + ' × quantity=' + quantity + ' = ' + totalPrice);
            
            // Update display
            document.getElementById('comboTotalPrice').textContent = totalPrice.toLocaleString() + 'đ';
        }

        // Change quantity helper function
        function changeQuantity(delta) {
            const qtyInput = document.getElementById('orderQty');
            let currentQty = parseInt(qtyInput.value) || 1;
            const newQty = Math.max(1, currentQty + delta);
            qtyInput.value = newQty;
            updateComboPrice();
        }





        // Global variable to store current product being configured
        let currentProductId = null;

        // Update the event listener for order buttons to handle both combo and regular products
        document.addEventListener('click', function(e) {
            if (e.target && e.target.classList.contains('btn-order')) {
                // Handle combo products (open modal)
                currentProductId = parseInt(e.target.getAttribute('data-product-id'));
                
                // Reset modal title
                document.getElementById('orderOptionsModalLabel').textContent = 'Tùy chọn combo';
                
                const productId = e.target.getAttribute('data-product-id');
                fetch(`/Menu/GetComboOptions?productId=${productId}`)
                    .then(res => res.json())
                    .then(data => {
                        if (data && data.productName) {
                            document.getElementById('orderOptionsModalLabel').textContent = `Tùy chọn - ${data.productName}`;
                        }
                        
                        // Store base product info for price calculation BEFORE rendering
                        const productCard = e.target.closest('.menu-card');
                        const priceText = productCard.querySelector('.menu-price').textContent;
                        const basePrice = parseInt(priceText.replace(/[^\d]/g, ''));
                        
                        console.log('🏷️ Product card price text:', priceText);
                        console.log('🏷️ Parsed base price:', basePrice);
                        
                        // Add basePrice to data before storing
                        if (data) {
                            data.basePrice = basePrice;
                        }
                        
                        renderComboOptions(data);
                    })
                    .catch(err => {
                        document.getElementById('orderOptionsForm').innerHTML = '<div class="text-danger">Không thể tải tùy chọn combo!</div>';
                    });
            } else if (e.target && e.target.classList.contains('btn-order-simple')) {
                // Handle regular products (add directly to cart)
                const productId = parseInt(e.target.getAttribute('data-product-id'));
                const productName = e.target.getAttribute('data-product-name');
                const productPrice = e.target.getAttribute('data-product-price');
                
                // Disable button temporarily
                const originalText = e.target.innerHTML;
                e.target.disabled = true;
                e.target.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Đang thêm...';
                
                // Add to cart with no configuration options
                console.log('🛒 Adding regular product to cart:', {productId, productName, productPrice});
                
                window.jollibeeCart.addToCart(productId, 1, [])
                    .then(success => {
                        console.log('🛒 Add to cart result:', success);
                        if (success) {
                            // Show success feedback
                            e.target.innerHTML = '<i class="fas fa-check"></i> Đã thêm!';
                            setTimeout(() => {
                                e.target.innerHTML = originalText;
                                e.target.disabled = false;
                            }, 1500);
                        } else {
                            alert('Không thể thêm vào giỏ hàng. Vui lòng thử lại.');
                            e.target.innerHTML = originalText;
                            e.target.disabled = false;
                        }
                    })
                    .catch(error => {
                        console.error('❌ Error adding regular product to cart:', error);
                        alert('Có lỗi xảy ra. Vui lòng thử lại.');
                        e.target.innerHTML = originalText;
                        e.target.disabled = false;
                    });
            }
        });

        // Add to cart functionality
        document.getElementById('addToCartBtn').addEventListener('click', async function() {
            // Check if we're in editing mode (cart edit) or adding new item
            const isEditingMode = window.jollibeeCart && window.jollibeeCart.editingCartItemId;
            
            if (isEditingMode) {
                // Call cart's save method for editing
                await window.jollibeeCart.saveItemChanges();
                return;
            }
            
            // Regular add to cart flow
            if (!currentProductId) {
                alert('Vui lòng chọn sản phẩm');
                return;
            }

            // Get quantity
            const quantity = parseInt(document.getElementById('orderQty').value) || 1;
            
            // Get selected options
            const selectedOptions = [];
            const form = document.getElementById('orderOptionsForm');
            const radioGroups = form.querySelectorAll('input[type="radio"]:checked');
            
            radioGroups.forEach(radio => {
                const optionData = radio.id.match(/group(\d+)-option(\d+)/);
                if (optionData) {
                    const configGroupID = parseInt(optionData[1]);
                    const configOptionID = parseInt(optionData[2]);
                    selectedOptions.push({
                        ConfigGroupID: configGroupID,
                        ConfigOptionID: configOptionID,
                        OptionProductID: 0, // Will be populated by backend
                        VariantID: null // Will be populated by backend
                    });
                }
            });

            // Disable button to prevent double-click
            this.disabled = true;
            this.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Đang thêm...';

            try {
                // Add to cart using global cart instance
                const success = await window.jollibeeCart.addToCart(currentProductId, quantity, selectedOptions);
                
                if (success) {
                    // Close modal
                    const modal = bootstrap.Modal.getInstance(document.getElementById('orderOptionsModal'));
                    modal.hide();
                    
                    // Reset form
                    currentProductId = null;
                } else {
                    alert('Không thể thêm vào giỏ hàng. Vui lòng thử lại.');
                }
            } catch (error) {
                console.error('Error adding to cart:', error);
                alert('Có lỗi xảy ra. Vui lòng thử lại.');
            } finally {
                // Re-enable button
                this.disabled = false;
                this.innerHTML = '<i class="fas fa-shopping-cart"></i> Thêm vào giỏ hàng';
            }
        });

        // Reset modal when closed
        document.getElementById('orderOptionsModal').addEventListener('hidden.bs.modal', function() {
            currentProductId = null;
            window.currentCombo = null;
            document.getElementById('orderOptionsForm').innerHTML = '';
            
            // Reset quantity input if it exists
            const qtyInput = document.getElementById('orderQty');
            if (qtyInput) {
                qtyInput.value = 1;
            }
            
            // Reset price display
            document.getElementById('comboTotalPrice').textContent = '0đ';
            
            // Reset add to cart button to original state
            const addToCartBtn = document.getElementById('addToCartBtn');
            if (addToCartBtn) {
                addToCartBtn.innerHTML = '<i class="fas fa-shopping-cart"></i> Thêm vào giỏ hàng';
                addToCartBtn.onclick = null; // Remove any custom onclick handler
            }
            
            // Reset modal title
            const modalTitle = document.getElementById('orderOptionsModalLabel');
            if (modalTitle) {
                modalTitle.textContent = 'Tùy chọn combo';
            }
            
            // Clear editing context from cart
            if (window.jollibeeCart) {
                window.jollibeeCart.editingCartItemId = null;
                window.jollibeeCart.editingCartItem = null;
            }
        });
    </script>
} 