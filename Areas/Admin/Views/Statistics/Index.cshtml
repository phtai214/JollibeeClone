@{
    ViewData["Title"] = "Th·ªëng k√™ doanh thu";
    Layout = "~/Areas/Admin/Views/Shared/_AdminLayout.cshtml";
}

@section Styles {
    <link rel="stylesheet" href="~/css/statistics.css" asp-append-version="true" />
}

<div class="content-area">
    <!-- Statistics Header -->
    <div class="statistics-header">
        <h1>
            <i class="fas fa-chart-line header-icon"></i>
            Th·ªëng k√™ doanh thu
        </h1>
        <p class="mb-0">T·ªïng quan doanh thu v√† hi·ªáu su·∫•t kinh doanh</p>
    </div>

    <!-- Date Filter Section -->
    <div class="date-filter-section">
        <div class="date-filter-group">
            <label for="dateRange" class="date-filter-label">
                <i class="fas fa-calendar-alt me-2"></i>Kho·∫£ng th·ªùi gian:
            </label>
            <select id="dateRange" class="date-range-select form-select">
                <option value="today">H√¥m nay</option>
                <option value="week" selected>7 ng√†y qua</option>
                <option value="month">Th√°ng n√†y</option>
                <option value="quarter">Qu√Ω n√†y</option>
                <option value="year">NƒÉm nay</option>
                <option value="custom">T√πy ch·ªçn</option>
            </select>
        </div>
        <form method="post" action="@Url.Action("ExportReport", "Statistics")" class="d-inline">
            <input type="hidden" name="dateRange" id="exportDateRange" value="week">
            <button type="submit" class="export-btn">
                <i class="fas fa-file-excel"></i>
                Xu·∫•t b√°o c√°o Excel
            </button>
        </form>
        @* <button type="button" class="export-btn" id="createTestDataBtn" style="background: linear-gradient(135deg, #28a745 0%, #20c997 100%);">
            <i class="fas fa-plus"></i>
            T·∫°o d·ªØ li·ªáu test
        </button>
        <button type="button" class="export-btn" id="checkDataBtn" style="background: linear-gradient(135deg, #17a2b8 0%, #138496 100%);">
            <i class="fas fa-search"></i>
            Ki·ªÉm tra d·ªØ li·ªáu
        </button> *@
    </div>

    <!-- Stats Overview -->
    <div class="stats-overview">
        <div class="stat-card revenue">
            <div class="stat-card-header">
                <h6 class="stat-card-title">T·ªïng doanh thu</h6>
                <div class="stat-card-icon">
                    <i class="fas fa-money-bill-wave"></i>
                </div>
            </div>
            <h2 class="stat-card-value" id="totalRevenue">0 VNƒê</h2>
            <div class="stat-card-trend" id="revenueTrend">
                <i class="fas fa-arrow-up"></i>
                <span>ƒêang t·∫£i...</span>
            </div>
        </div>

        <div class="stat-card paid">
            <div class="stat-card-header">
                <h6 class="stat-card-title">ƒê√£ thanh to√°n</h6>
                <div class="stat-card-icon">
                    <i class="fas fa-check-circle"></i>
                </div>
            </div>
            <h2 class="stat-card-value" id="paidRevenue">0 VNƒê</h2>
            <div class="stat-card-trend" id="paidTrend">
                <i class="fas fa-arrow-up"></i>
                <span>ƒêang t·∫£i...</span>
            </div>
        </div>

        <div class="stat-card orders">
            <div class="stat-card-header">
                <h6 class="stat-card-title">T·ªïng ƒë∆°n h√†ng</h6>
                <div class="stat-card-icon">
                    <i class="fas fa-shopping-cart"></i>
                </div>
            </div>
            <h2 class="stat-card-value" id="totalOrders">0</h2>
            <div class="stat-card-trend" id="ordersTrend">
                <i class="fas fa-arrow-up"></i>
                <span>ƒêang t·∫£i...</span>
            </div>
        </div>

        <div class="stat-card paid-orders">
            <div class="stat-card-header">
                <h6 class="stat-card-title">ƒê∆°n ƒë√£ thanh to√°n</h6>
                <div class="stat-card-icon">
                    <i class="fas fa-credit-card"></i>
                </div>
            </div>
            <h2 class="stat-card-value" id="paidOrders">0</h2>
            <div class="stat-card-trend" id="paidOrdersTrend">
                <i class="fas fa-arrow-up"></i>
                <span>ƒêang t·∫£i...</span>
            </div>
        </div>

        <div class="stat-card cancelled-orders">
            <div class="stat-card-header">
                <h6 class="stat-card-title">ƒê∆°n h√†ng ƒë√£ h·ªßy</h6>
                <div class="stat-card-icon">
                    <i class="fas fa-times-circle"></i>
                </div>
            </div>
            <h2 class="stat-card-value" id="cancelledOrders">0</h2>
            <div class="stat-card-trend" id="cancelledOrdersTrend">
                <i class="fas fa-arrow-up"></i>
                <span>ƒêang t·∫£i...</span>
            </div>
        </div>
    </div>

    <!-- Charts Section -->
    <div class="charts-section">
        <!-- Revenue Chart -->
        <div class="chart-card">
            <div class="chart-card-header">
                <div>
                    <h3 class="chart-card-title">
                        <i class="fas fa-chart-bar text-primary"></i>
                        Doanh thu theo ng√†y
                    </h3>
                    <p class="chart-card-subtitle">Bi·ªÉu ƒë·ªì doanh thu v√† s·∫£n ph·∫©m b√°n ch·∫°y trong kho·∫£ng th·ªùi gian</p>
                </div>
                <div class="chart-actions">
                    <button class="chart-btn active" data-type="revenue">Doanh thu</button>
                    <button class="chart-btn" data-type="orders">ƒê∆°n h√†ng</button>
                </div>
            </div>
            <div class="chart-container">
                <canvas id="revenueChart"></canvas>
            </div>
        </div>

        <!-- Order Status Pie Chart -->
        <div class="chart-card">
            <div class="chart-card-header">
                <div>
                    <h3 class="chart-card-title">
                        <i class="fas fa-chart-pie text-warning"></i>
                        Tr·∫°ng th√°i ƒë∆°n h√†ng
                    </h3>
                    <p class="chart-card-subtitle">T·ªâ l·ªá ƒë∆°n h√†ng theo tr·∫°ng th√°i</p>
                </div>
            </div>
            <div class="pie-chart-container">
                <canvas id="orderStatusChart"></canvas>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
        let currentChart;
        let orderStatusChart;
        let currentDateRange = 'week';
        let bestSellingProducts = [];

        // Kh·ªüi t·∫°o trang
        document.addEventListener('DOMContentLoaded', function() {
            loadStatisticsData();
        });

        // H√†m t·∫£i d·ªØ li·ªáu th·ªëng k√™ t·ªïng quan
        async function loadStatisticsOverview(dateRange = 'week') {
            try {
                const response = await fetch(`@Url.Action("GetStatisticsOverview", "Statistics")?dateRange=${dateRange}`);
                const data = await response.json();

                // Debug: Log API response
                console.log('üìä Statistics API Response:', data);
                console.log('üî¢ Cancelled Orders from API:', data.cancelledOrders);

                // C·∫≠p nh·∫≠t c√°c s·ªë li·ªáu t·ªïng quan
                document.getElementById('totalRevenue').textContent = data.totalRevenue + ' VNƒê';
                document.getElementById('paidRevenue').textContent = data.paidRevenue + ' VNƒê';
                document.getElementById('totalOrders').textContent = data.totalOrders;
                document.getElementById('paidOrders').textContent = data.paidOrders;
                document.getElementById('cancelledOrders').textContent = data.cancelledOrders;

                // Debug: Log what's being set in UI
                console.log('üéØ UI Update - Cancelled Orders set to:', data.cancelledOrders);

                // C·∫≠p nh·∫≠t trend
                updateTrend('revenueTrend', data.revenueChange);
                updateTrend('ordersTrend', data.ordersChange);
                updateTrend('paidTrend', data.paidRevenueChange); // D√πng trend ri√™ng cho ƒë√£ thanh to√°n
                updateTrend('paidOrdersTrend', data.paidOrdersChange); // D√πng trend ri√™ng cho ƒë∆°n ƒë√£ thanh to√°n
                updateTrend('cancelledOrdersTrend', data.cancelledOrdersChange); // D√πng trend ri√™ng cho ƒë∆°n ƒë√£ h·ªßy

            } catch (error) {
                console.error('L·ªói khi t·∫£i d·ªØ li·ªáu t·ªïng quan:', error);
            }
        }

        // H√†m c·∫≠p nh·∫≠t trend
        function updateTrend(elementId, changePercent) {
            const element = document.getElementById(elementId);
            const icon = element.querySelector('i');
            const span = element.querySelector('span');
            
            if (changePercent > 0) {
                icon.className = 'fas fa-arrow-up';
                span.textContent = `+${changePercent}% so v·ªõi k·ª≥ tr∆∞·ªõc`;
                element.style.color = '#28a745';
            } else if (changePercent < 0) {
                icon.className = 'fas fa-arrow-down';
                span.textContent = `${changePercent}% so v·ªõi k·ª≥ tr∆∞·ªõc`;
                element.style.color = '#dc3545';
            } else {
                icon.className = 'fas fa-minus';
                span.textContent = 'Kh√¥ng thay ƒë·ªïi';
                element.style.color = '#6c757d';
            }
        }

        // H√†m t·∫£i d·ªØ li·ªáu bi·ªÉu ƒë·ªì doanh thu
        async function loadRevenueChartData(dateRange = 'week') {
            try {
                const response = await fetch(`@Url.Action("GetRevenueChartData", "Statistics")?dateRange=${dateRange}`);
                const data = await response.json();

                const revenueData = {
                    labels: data.labels,
                    datasets: [{
                        label: 'Doanh thu (VNƒê)',
                        data: data.revenueData,
                        borderColor: '#DC143C',
                        backgroundColor: 'rgba(220, 20, 60, 0.1)',
                        borderWidth: 3,
                        fill: true,
                        tension: 0.4,
                        pointBackgroundColor: '#DC143C',
                        pointBorderColor: '#fff',
                        pointBorderWidth: 2,
                        pointRadius: 6,
                        pointHoverRadius: 8
                    }]
                };

                const orderData = {
                    labels: data.labels,
                    datasets: [{
                        label: 'S·ªë ƒë∆°n h√†ng',
                        data: data.orderData,
                        borderColor: '#007bff',
                        backgroundColor: 'rgba(0, 123, 255, 0.1)',
                        borderWidth: 3,
                        fill: true,
                        tension: 0.4,
                        pointBackgroundColor: '#007bff',
                        pointBorderColor: '#fff',
                        pointBorderWidth: 2,
                        pointRadius: 6,
                        pointHoverRadius: 8
                    }]
                };

                // T·∫°o bi·ªÉu ƒë·ªì
                const ctx1 = document.getElementById('revenueChart').getContext('2d');
                if (currentChart) {
                    currentChart.destroy();
                }

                currentChart = new Chart(ctx1, {
                    type: 'line',
                    data: revenueData,
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        interaction: {
                            intersect: false,
                            mode: 'index'
                        },
                        plugins: {
                            tooltip: {
                                backgroundColor: 'white',
                                titleColor: 'red',
                                bodyColor: '#4E4D4DFF',
                                borderColor: '#DC143C',
                                borderWidth: 1,
                                cornerRadius: 8,
                                displayColors: false,
                                callbacks: {
                                    label: function(context) {
                                        const dataIndex = context.dataIndex;
                                        const value = context.parsed.y;
                                        
                                        if (data.bestSellingProducts && data.bestSellingProducts[dataIndex]) {
                                            const bestSellingData = data.bestSellingProducts[dataIndex];
                                            return [
                                                `Doanh thu: ${value.toLocaleString('vi-VN')} VNƒê`,
                                                `S·∫£n ph·∫©m b√°n ch·∫°y: ${bestSellingData.bestProduct}`,
                                                `ƒê√£ b√°n: ${bestSellingData.bestProductSold} ph·∫ßn`
                                            ];
                                        } else {
                                            return `Doanh thu: ${value.toLocaleString('vi-VN')} VNƒê`;
                                        }
                                    }
                                }
                            },
                            legend: {
                                display: false
                            }
                        },
                        scales: {
                            x: {
                                grid: {
                                    display: false
                                },
                                ticks: {
                                    color: '#6c757d'
                                }
                            },
                            y: {
                                grid: {
                                    color: 'rgba(0, 0, 0, 0.05)'
                                },
                                ticks: {
                                    color: '#6c757d',
                                    callback: function(value) {
                                        return (value / 1000000).toFixed(1) + 'M';
                                    }
                                }
                            }
                        }
                    }
                });

                // L∆∞u data ƒë·ªÉ chuy·ªÉn ƒë·ªïi
                currentChart.revenueData = revenueData;
                currentChart.orderData = orderData;
                currentChart.bestSellingData = data.bestSellingProducts;

            } catch (error) {
                console.error('L·ªói khi t·∫£i d·ªØ li·ªáu bi·ªÉu ƒë·ªì:', error);
            }
        }

        // H√†m t·∫£i d·ªØ li·ªáu bi·ªÉu ƒë·ªì tr·∫°ng th√°i ƒë∆°n h√†ng
        async function loadOrderStatusChart(dateRange = 'week') {
            try {
                const response = await fetch(`@Url.Action("GetOrderStatusData", "Statistics")?dateRange=${dateRange}`);
                const data = await response.json();

                // Debug: Log chart data
                console.log('üìà Order Status Chart Data:', data);
                console.log('üìã Status Labels:', data.labels);
                console.log('üî¢ Status Data:', data.data);

                const ctx2 = document.getElementById('orderStatusChart').getContext('2d');
                if (orderStatusChart) {
                    orderStatusChart.destroy();
                }

                orderStatusChart = new Chart(ctx2, {
                    type: 'doughnut',
                    data: {
                        labels: data.labels,
                        datasets: [{
                            data: data.data,
                            backgroundColor: [
                                '#E0E0E0FF',
                                '#FFCA2BFF', 
                                '#15ACC3FF',
                                '#AFFF2EFF',
                                '#2AC24DFF',
                                '#dc3545'
                            ],
                            borderWidth: 0,
                            hoverOffset: 10
                        }]
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        plugins: {
                            tooltip: {
                                backgroundColor: 'white',
                                titleColor: 'red',
                                bodyColor: '#4E4D4DFF',
                                borderColor: '#DC143C',
                                borderWidth: 1,
                                cornerRadius: 8,
                                callbacks: {
                                    label: function(context) {
                                        const total = context.dataset.data.reduce((a, b) => a + b, 0);
                                        const percentage = ((context.parsed / total) * 100).toFixed(1);
                                        return `${context.label}: ${context.parsed} ƒë∆°n (${percentage}%)`;
                                    }
                                }
                            },
                            legend: {
                                position: 'bottom',
                                labels: {
                                    usePointStyle: true,
                                    padding: 20,
                                    color: '#212529'
                                }
                            }
                        },
                        cutout: '60%'
                    }
                });

            } catch (error) {
                console.error('L·ªói khi t·∫£i d·ªØ li·ªáu tr·∫°ng th√°i ƒë∆°n h√†ng:', error);
            }
        }

        // H√†m t·∫£i t·∫•t c·∫£ d·ªØ li·ªáu
        async function loadStatisticsData(dateRange = 'week') {
            currentDateRange = dateRange;
            await Promise.all([
                loadStatisticsOverview(dateRange),
                loadRevenueChartData(dateRange),
                loadOrderStatusChart(dateRange)
            ]);
        }

        // X·ª≠ l√Ω thay ƒë·ªïi kho·∫£ng th·ªùi gian
        document.getElementById('dateRange').addEventListener('change', function() {
            const dateRange = this.value;
            document.getElementById('exportDateRange').value = dateRange;
            loadStatisticsData(dateRange);
        });

        // Chuy·ªÉn ƒë·ªïi gi·ªØa bi·ªÉu ƒë·ªì doanh thu v√† ƒë∆°n h√†ng
        const chartButtons = document.querySelectorAll('.chart-btn');
        chartButtons.forEach(btn => {
            btn.addEventListener('click', function() {
                chartButtons.forEach(b => b.classList.remove('active'));
                this.classList.add('active');
                
                const type = this.dataset.type;
                if (currentChart) {
                    if (type === 'revenue') {
                        currentChart.data = currentChart.revenueData;
                        // C·∫≠p nh·∫≠t tooltip v√† tr·ª•c Y cho doanh thu
                        currentChart.options.plugins.tooltip.callbacks.label = function(context) {
                            const dataIndex = context.dataIndex;
                            const value = context.parsed.y;
                            
                            if (currentChart.bestSellingData && currentChart.bestSellingData[dataIndex]) {
                                const bestSellingData = currentChart.bestSellingData[dataIndex];
                                return [
                                    `Doanh thu: ${value.toLocaleString('vi-VN')} VNƒê`,
                                    `S·∫£n ph·∫©m b√°n ch·∫°y: ${bestSellingData.bestProduct}`,
                                    `ƒê√£ b√°n: ${bestSellingData.bestProductSold} ph·∫ßn`
                                ];
                            } else {
                                return `Doanh thu: ${value.toLocaleString('vi-VN')} VNƒê`;
                            }
                        };
                        currentChart.options.scales.y.ticks.callback = function(value) {
                            return (value / 1000000).toFixed(1) + 'M';
                        };
                    } else {
                        currentChart.data = currentChart.orderData;
                        // C·∫≠p nh·∫≠t tooltip v√† tr·ª•c Y cho ƒë∆°n h√†ng
                        currentChart.options.plugins.tooltip.callbacks.label = function(context) {
                            const dataIndex = context.dataIndex;
                            const value = context.parsed.y;
                            
                            if (currentChart.bestSellingData && currentChart.bestSellingData[dataIndex]) {
                                const bestSellingData = currentChart.bestSellingData[dataIndex];
                                return [
                                    `S·ªë ƒë∆°n h√†ng: ${value}`,
                                    `S·∫£n ph·∫©m b√°n ch·∫°y: ${bestSellingData.bestProduct}`,
                                    `ƒê√£ b√°n: ${bestSellingData.bestProductSold} ph·∫ßn`
                                ];
                            } else {
                                return `S·ªë ƒë∆°n h√†ng: ${value}`;
                            }
                        };
                        currentChart.options.scales.y.ticks.callback = function(value) {
                            return Math.round(value); // Hi·ªÉn th·ªã s·ªë nguy√™n cho ƒë∆°n h√†ng
                        };
                    }
                    currentChart.update();
                }
            });
        });

        // Custom date range (c√≥ th·ªÉ m·ªü r·ªông sau)
        document.getElementById('dateRange').addEventListener('change', function() {
            if (this.value === 'custom') {
                // C√≥ th·ªÉ th√™m date picker t√πy ch·ªânh ·ªü ƒë√¢y
                console.log('Custom date range selected');
            }
        });

        // Test data creation button
        document.getElementById('createTestDataBtn').addEventListener('click', async function() {
            try {
                const response = await fetch('@Url.Action("CreateTestCancelledOrders", "Statistics")', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]')?.value || ''
                    }
                });
                
                const result = await response.json();
                alert(result.message);
                
                if (result.success) {
                    // Reload statistics after creating test data
                    loadStatisticsData(currentDateRange);
                }
            } catch (error) {
                console.error('Error creating test data:', error);
                alert('L·ªói khi t·∫°o d·ªØ li·ªáu test');
            }
        });

        // Check data button
        document.getElementById('checkDataBtn').addEventListener('click', async function() {
            try {
                const response = await fetch('@Url.Action("CheckCurrentData", "Statistics")');
                const result = await response.json();
                
                if (result.success) {
                    let message = `üìä Th·ªëng k√™ d·ªØ li·ªáu hi·ªán t·∫°i:\n\n`;
                    message += `‚Ä¢ T·ªïng ƒë∆°n h√†ng: ${result.totalOrders}\n`;
                    message += `‚Ä¢ ƒê∆°n ƒë√£ h·ªßy: ${result.cancelledOrders}\n`;
                    message += `‚Ä¢ ƒê∆°n ho√†n th√†nh: ${result.completedOrders}\n\n`;
                    message += `üìã Chi ti·∫øt theo tr·∫°ng th√°i:\n`;
                    
                    result.statusBreakdown.forEach(item => {
                        message += `‚Ä¢ ${item.Status}: ${item.Count} ƒë∆°n\n`;
                    });
                    
                    alert(message);
                    console.log('Current data:', result);
                } else {
                    alert('L·ªói: ' + result.message);
                }
            } catch (error) {
                console.error('Error checking data:', error);
                alert('L·ªói khi ki·ªÉm tra d·ªØ li·ªáu');
            }
        });
    </script>
} 