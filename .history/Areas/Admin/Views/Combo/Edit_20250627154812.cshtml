@model JollibeeClone.ViewModels.ComboCreateViewModel

@{
    ViewData["Title"] = "Chỉnh sửa Combo";
    Layout = "~/Areas/Admin/Views/Shared/_AdminLayout.cshtml";
    var comboId = ViewBag.ComboId as int?;
}

<link rel="stylesheet" href="~/css/admin-combo.css" />

<div class="container-fluid py-4">
    <!-- Header Section -->
    <div class="combo-header fade-in">
        <div class="d-flex justify-content-between align-items-center">
            <div>
                <h1><i class="fas fa-edit me-3"></i>Chỉnh sửa Combo</h1>
                <p>Cập nhật thông tin và cấu hình combo sản phẩm</p>
            </div>
            <div>
                <a href="@Url.Action("Index", "Combo")" class="btn btn-light btn-lg">
                    <i class="fas fa-arrow-left me-2"></i>Quay lại
                </a>
            </div>
        </div>
    </div>

    <div class="row">
        <div class="col-12">
            <div class="combo-card">
                <div class="card-header">
                    <div class="d-lg-flex justify-content-between align-items-center">
                        <div>
                            <h6 class="mb-0"><i class="fas fa-cog me-2"></i>Thông tin Combo</h6>
                        </div>
                        <div class="d-flex gap-2">
                            <a href="@Url.Action("Details", "Combo", new { id = comboId })" class="btn btn-light btn-sm">
                                <i class="fas fa-eye me-1"></i>Xem chi tiết
                            </a>
                        </div>
                    </div>
                </div>
                <div class="card-body">
                    <form asp-action="Edit" asp-route-id="@comboId" method="post" enctype="multipart/form-data" id="comboForm">
                        <div asp-validation-summary="ModelOnly" class="text-danger"></div>

                        <!-- Alert for editing -->
                        <div class="alert alert-info d-flex align-items-center mb-4">
                            <i class="fas fa-info-circle me-2"></i>
                            <div>
                                <strong>Lưu ý:</strong> Khi chỉnh sửa combo, tất cả cấu hình cũ sẽ được thay thế bằng cấu hình mới. Vui lòng kiểm tra kỹ trước khi lưu.
                            </div>
                        </div>

                        <!-- Thông tin combo cơ bản -->
                        <div class="row mb-4">
                            <div class="col-md-6">
                                <div class="form-group">
                                    <label asp-for="ComboName" class="form-control-label"></label>
                                    <input asp-for="ComboName" class="form-control" placeholder="Nhập tên combo">
                                    <span asp-validation-for="ComboName" class="text-danger"></span>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-group">
                                    <label asp-for="ComboPrice" class="form-control-label"></label>
                                    <input asp-for="ComboPrice" class="form-control" type="number" step="0.01" placeholder="0">
                                    <span asp-validation-for="ComboPrice" class="text-danger"></span>
                                </div>
                            </div>
                        </div>

                        <div class="row mb-4">
                            <div class="col-md-6">
                                <div class="form-group">
                                    <label asp-for="CategoryID" class="form-control-label"></label>
                                    <select asp-for="CategoryID" class="form-control">
                                        <option value="">-- Chọn danh mục --</option>
                                        @foreach (var category in Model.Categories)
                                        {
                                            <option value="@category.CategoryID" selected="@(category.CategoryID == Model.CategoryID)">@category.CategoryName</option>
                                        }
                                    </select>
                                    <span asp-validation-for="CategoryID" class="text-danger"></span>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-group">
                                    <label asp-for="ShortDescription" class="form-control-label"></label>
                                    <textarea asp-for="ShortDescription" class="form-control" rows="3" placeholder="Mô tả ngắn về combo"></textarea>
                                    <span asp-validation-for="ShortDescription" class="text-danger"></span>
                                </div>
                            </div>
                        </div>

                        <div class="row mb-4">
                            <div class="col-md-6">
                                <div class="form-group">
                                    <label asp-for="ImageFile" class="form-control-label"></label>
                                    <input asp-for="ImageFile" type="file" class="form-control" accept="image/*">
                                    <span asp-validation-for="ImageFile" class="text-danger"></span>
                                    <small class="text-muted">Để trống nếu không muốn thay đổi ảnh hiện tại</small>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-group">
                                    <label asp-for="ThumbnailFile" class="form-control-label"></label>
                                    <input asp-for="ThumbnailFile" type="file" class="form-control" accept="image/*">
                                    <span asp-validation-for="ThumbnailFile" class="text-danger"></span>
                                    <small class="text-muted">Để trống nếu không muốn thay đổi thumbnail hiện tại</small>
                                </div>
                            </div>
                        </div>

                        <hr class="my-4">

                        <!-- Nhóm cấu hình -->
                        <div class="d-flex justify-content-between align-items-center mb-3">
                            <h6 class="mb-0"><i class="fas fa-layer-group me-2"></i>Nhóm tùy chọn</h6>
                            <button type="button" class="btn btn-add-group" id="addGroupBtn">
                                <i class="fas fa-plus"></i> Thêm nhóm
                            </button>
                        </div>

                        <div id="configGroups">
                            <!-- Groups sẽ được thêm bằng JavaScript -->
                        </div>

                        <div class="row mt-4">
                            <div class="col-12 d-flex gap-2">
                                <button type="submit" class="btn btn-primary">
                                    <i class="fas fa-save"></i> Cập nhật combo
                                </button>
                                <a href="@Url.Action("Details", "Combo", new { id = comboId })" class="btn btn-info">
                                    <i class="fas fa-eye"></i> Xem chi tiết
                                </a>
                                <a href="@Url.Action("Index", "Combo")" class="btn btn-secondary">
                                    <i class="fas fa-times"></i> Hủy
                                </a>
                            </div>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Template cho Group -->
<template id="groupTemplate">
    <div class="config-group mb-3 fade-in">
        <div class="card-header">
            <div class="d-flex justify-content-between align-items-center">
                <h6 class="mb-0"><i class="fas fa-layer-group me-2"></i>Nhóm {groupIndex}</h6>
                <button type="button" class="btn btn-remove removeGroupBtn">
                    <i class="fas fa-trash"></i>
                </button>
            </div>
        </div>
        <div class="card-body">
            <div class="row mb-3">
                <div class="col-md-4">
                    <label class="form-control-label">Tên nhóm</label>
                    <input name="ConfigGroups[{groupIndex}].GroupName" class="form-control" placeholder="VD: Chọn gà" required>
                </div>
                <div class="col-md-2">
                    <label class="form-control-label">Min</label>
                    <input name="ConfigGroups[{groupIndex}].MinSelections" type="number" class="form-control" value="1" min="1">
                </div>
                <div class="col-md-2">
                    <label class="form-control-label">Max</label>
                    <input name="ConfigGroups[{groupIndex}].MaxSelections" type="number" class="form-control" value="1" min="1">
                </div>
                <div class="col-md-2">
                    <label class="form-control-label">Thứ tự</label>
                    <input name="ConfigGroups[{groupIndex}].DisplayOrder" type="number" class="form-control" value="0">
                </div>
                <div class="col-md-2">
                    <button type="button" class="btn btn-add-option mt-4 addOptionBtn">
                        <i class="fas fa-plus"></i> Thêm món
                    </button>
                </div>
            </div>
            
            <div class="options-container">
                <!-- Options sẽ được thêm ở đây -->
            </div>
        </div>
    </div>
</template>

<!-- Template cho Option -->
<template id="optionTemplate">
    <div class="option-item slide-up">
        <div class="d-flex justify-content-between align-items-center mb-2">
            <h6 class="mb-0">Món {optionIndex}</h6>
            <button type="button" class="btn btn-remove removeOptionBtn">
                <i class="fas fa-trash"></i>
            </button>
        </div>
        
        <div class="row">
            <div class="col-md-3">
                <label class="form-control-label">Sản phẩm</label>
                <select name="ConfigGroups[{groupIndex}].Options[{optionIndex}].ProductID" class="form-control product-select" required>
                    <option value="">-- Chọn sản phẩm --</option>
                    @foreach (var product in Model.AvailableProducts)
                    {
                        <option value="@product.ProductID" data-price="@product.Price" data-image="@product.ImageUrl" data-thumbnail="@product.ThumbnailUrl">
                            @product.ProductName
                        </option>
                    }
                </select>
            </div>
            <div class="col-md-2">
                <label class="form-control-label">Biến thể</label>
                <select name="ConfigGroups[{groupIndex}].Options[{optionIndex}].VariantID" class="form-control variant-select">
                    <option value="">-- Không có --</option>
                </select>
            </div>
            <div class="col-md-2">
                <label class="form-control-label">Số lượng</label>
                <input name="ConfigGroups[{groupIndex}].Options[{optionIndex}].Quantity" type="number" class="form-control" value="1" min="1">
            </div>
            <div class="col-md-2">
                <label class="form-control-label">Giá cộng thêm</label>
                <input name="ConfigGroups[{groupIndex}].Options[{optionIndex}].PriceAdjustment" type="number" step="0.01" class="form-control" value="0">
            </div>
            <div class="col-md-2">
                <label class="form-control-label">Thứ tự</label>
                <input name="ConfigGroups[{groupIndex}].Options[{optionIndex}].DisplayOrder" type="number" class="form-control" value="0">
            </div>
            <div class="col-md-1">
                <label class="form-control-label">Mặc định</label>
                <div class="form-check mt-1">
                    <input name="ConfigGroups[{groupIndex}].Options[{optionIndex}].IsDefault" type="checkbox" class="form-check-input">
                </div>
            </div>
        </div>
        
        <div class="row mt-2">
            <div class="col-md-6">
                <label class="form-control-label">Ảnh custom</label>
                <input name="ConfigGroups[{groupIndex}].Options[{optionIndex}].CustomImageFile" type="file" class="form-control" accept="image/*">
                <small class="text-muted">Để trống nếu không muốn thay đổi ảnh custom</small>
            </div>
            <div class="col-md-6">
                <div class="product-preview d-none">
                    <small class="text-muted">Preview:</small>
                    <div class="d-flex align-items-center">
                        <img class="product-preview-img me-2" style="width: 30px; height: 30px; object-fit: cover; border-radius: 4px;">
                        <span class="product-preview-name"></span>
                    </div>
                </div>
            </div>
        </div>
    </div>
</template>

@section Scripts {
    <script>
        let groupIndex = 0;
        
        $(document).ready(function() {
            // Load existing data
            loadExistingComboData();
            
            // Event handlers
            $('#addGroupBtn').click(function() {
                addGroup();
            });
            
            $(document).on('click', '.removeGroupBtn', function() {
                if ($('.config-group').length > 1) {
                    $(this).closest('.config-group').remove();
                    reindexGroups();
                } else {
                    alert('Combo phải có ít nhất một nhóm!');
                }
            });
            
            $(document).on('click', '.addOptionBtn', function() {
                const groupContainer = $(this).closest('.config-group');
                const currentGroupIndex = getCurrentGroupIndex(groupContainer);
                addOption(groupContainer, currentGroupIndex);
            });
            
            $(document).on('click', '.removeOptionBtn', function() {
                const groupContainer = $(this).closest('.config-group');
                const optionsCount = groupContainer.find('.option-item').length;
                
                if (optionsCount > 1) {
                    $(this).closest('.option-item').remove();
                    reindexOptions(groupContainer);
                } else {
                    alert('Mỗi nhóm phải có ít nhất một món!');
                }
            });
            
            $(document).on('change', '.product-select', function() {
                const selectedOption = $(this).find('option:selected');
                const optionContainer = $(this).closest('.option-item');
                const variantSelect = optionContainer.find('.variant-select');
                const productId = $(this).val();
                
                // Clear variants
                variantSelect.html('<option value="">-- Không có --</option>');
                
                // Update preview
                updateProductPreview(optionContainer, selectedOption);
                
                // Load variants if product selected
                if (productId) {
                    loadProductVariants(productId, variantSelect);
                }
            });
        });

        // Load existing combo data
        function loadExistingComboData() {
            @if (Model.ConfigGroups != null && Model.ConfigGroups.Any())
            {
                foreach (var group in Model.ConfigGroups.OrderBy(g => g.DisplayOrder))
                {
                    <text>
                    // Add group
                    addGroup();
                    const currentGroup = $('.config-group').last();
                    
                    // Set group values
                    currentGroup.find('input[name$=".GroupName"]').val('@Html.Raw(group.GroupName)');
                    currentGroup.find('input[name$=".MinSelections"]').val(@group.MinSelections);
                    currentGroup.find('input[name$=".MaxSelections"]').val(@group.MaxSelections);
                    currentGroup.find('input[name$=".DisplayOrder"]').val(@group.DisplayOrder);
                    
                    // Remove default option and add existing options
                    currentGroup.find('.option-item').remove();
                    </text>
                    
                    foreach (var option in group.Options.OrderBy(o => o.DisplayOrder))
                    {
                        <text>
                        // Add option
                        const currentGroupIndex = getCurrentGroupIndex(currentGroup);
                        addOption(currentGroup, currentGroupIndex);
                        const currentOption = currentGroup.find('.option-item').last();
                        
                        // Set option values
                        currentOption.find('.product-select').val(@option.ProductID).trigger('change');
                        setTimeout(function() {
                            @if (option.VariantID.HasValue)
                            {
                                <text>currentOption.find('.variant-select').val(@option.VariantID);</text>
                            }
                            currentOption.find('input[name$=".Quantity"]').val(@option.Quantity);
                            currentOption.find('input[name$=".PriceAdjustment"]').val(@option.PriceAdjustment);
                            currentOption.find('input[name$=".DisplayOrder"]').val(@option.DisplayOrder);
                            @if (option.IsDefault)
                            {
                                <text>currentOption.find('input[name$=".IsDefault"]').prop('checked', true);</text>
                            }
                        }, 500);
                        </text>
                    }
                }
            }
            else
            {
                <text>
                // Add first group if no existing data
                addGroup();
                </text>
            }
        }
        
        function addGroup() {
            const template = $('#groupTemplate').html();
            const groupHtml = template.replace(/{groupIndex}/g, groupIndex);
            $('#configGroups').append(groupHtml);
            
            // Add default option if no existing data is being loaded
            if (!@(Model.ConfigGroups?.Any() ?? false) || groupIndex > 0) {
                const newGroup = $('#configGroups .config-group').last();
                addOption(newGroup, groupIndex);
            }
            
            groupIndex++;
        }
        
        function addOption(groupContainer, currentGroupIndex) {
            const optionsContainer = groupContainer.find('.options-container');
            const optionCount = optionsContainer.find('.option-item').length;
            
            const template = $('#optionTemplate').html();
            const optionHtml = template.replace(/{groupIndex}/g, currentGroupIndex)
                                     .replace(/{optionIndex}/g, optionCount);
            
            optionsContainer.append(optionHtml);
        }
        
        function getCurrentGroupIndex(groupContainer) {
            return $('#configGroups .config-group').index(groupContainer);
        }
        
        function reindexGroups() {
            $('#configGroups .config-group').each(function(index) {
                const group = $(this);
                
                // Update group title
                group.find('.card-header h6').html('<i class="fas fa-layer-group me-2"></i>Nhóm ' + (index + 1));
                
                // Update all input names in this group
                group.find('input, select').each(function() {
                    const name = $(this).attr('name');
                    if (name && name.includes('ConfigGroups[')) {
                        const newName = name.replace(/ConfigGroups\[\d+\]/, 'ConfigGroups[' + index + ']');
                        $(this).attr('name', newName);
                    }
                });
                
                // Reindex options in this group
                reindexOptions(group);
            });
        }
        
        function reindexOptions(groupContainer) {
            const currentGroupIndex = getCurrentGroupIndex(groupContainer);
            
            groupContainer.find('.option-item').each(function(index) {
                const option = $(this);
                
                // Update option title
                option.find('h6').text('Món ' + (index + 1));
                
                // Update input names
                option.find('input, select').each(function() {
                    const name = $(this).attr('name');
                    if (name && name.includes('.Options[')) {
                        const newName = name.replace(/\.Options\[\d+\]\./, '.Options[' + index + '].');
                        $(this).attr('name', newName);
                    }
                });
            });
        }
        
        function updateProductPreview(optionContainer, selectedOption) {
            const preview = optionContainer.find('.product-preview');
            const img = preview.find('.product-preview-img');
            const name = preview.find('.product-preview-name');
            
            if (selectedOption.val()) {
                const productName = selectedOption.text();
                const thumbnail = selectedOption.data('thumbnail');
                const image = selectedOption.data('image');
                
                name.text(productName);
                
                if (thumbnail) {
                    img.attr('src', thumbnail);
                } else if (image) {
                    img.attr('src', image);
                } else {
                    img.attr('src', '/images/no-image.png');
                }
                
                preview.removeClass('d-none');
            } else {
                preview.addClass('d-none');
            }
        }
        
        function loadProductVariants(productId, variantSelect) {
            variantSelect.addClass('loading');
            
            $.get('@Url.Action("GetProductVariants", "Combo")', { productId: productId })
                .done(function(variants) {
                    variants.forEach(function(variant) {
                        const option = new Option(
                            variant.variantName + ' (+' + variant.priceAdjustment.toLocaleString() + '₫)',
                            variant.variantID
                        );
                        variantSelect.append(option);
                    });
                })
                .fail(function() {
                    console.error('Không thể tải variants');
                })
                .always(function() {
                    variantSelect.removeClass('loading');
                });
        }
    </script>
} 