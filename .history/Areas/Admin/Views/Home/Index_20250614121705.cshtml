@{
    ViewData["Title"] = "Dashboard";
}

@section Styles {
    <link rel="stylesheet" href="~/css/modern-dashboard.css" asp-append-version="true" />
}

<div class="dashboard">
    <!-- Enhanced Stats Cards -->
    <div class="row mb-4">
        <div class="col-lg-3 col-md-6 mb-4">
            <div class="modern-stats-card card-users">
                <div class="card-background">
                    <div class="card-icon">
                        <i class="fas fa-user-plus"></i>
                    </div>
                </div>
                <div class="card-content">
                    <div class="stats-info">
                        <h3 class="stats-number" id="usersCount" data-target="@ViewBag.NewUsersToday">@ViewBag.NewUsersToday</h3>
                        <h6 class="stats-title">NgÆ°á»i dÃ¹ng má»›i</h6>
                    </div>
                    <div class="stats-trend trend-positive">
                        <i class="fas fa-arrow-up"></i>
                        <span class="trend-value" id="usersPercent">0%</span>
                        <small class="trend-label">hÆ¡n thÃ¡ng trÆ°á»›c</small>
                    </div>
                </div>
            </div>
        </div>
        
        <div class="col-lg-3 col-md-6 mb-4">
            <div class="modern-stats-card card-orders">
                <div class="card-background">
                    <div class="card-icon">
                        <i class="fas fa-shopping-cart"></i>
                    </div>
                </div>
                <div class="card-content">
                    <div class="stats-info">
                        <h3 class="stats-number" id="ordersCount" data-target="@ViewBag.NewOrdersToday">@ViewBag.NewOrdersToday</h3>
                        <h6 class="stats-title">ÄÆ¡n hÃ ng má»›i</h6>
                    </div>
                    <div class="stats-trend trend-negative">
                        <i class="fas fa-arrow-down"></i>
                        <span class="trend-value" id="ordersPercent">0%</span>
                        <small class="trend-label">so vá»›i hÃ´m qua</small>
                    </div>
                </div>
            </div>
        </div>
        
        <div class="col-lg-3 col-md-6 mb-4">
            <div class="modern-stats-card card-revenue">
                <div class="card-background">
                    <div class="card-icon">
                        <i class="fas fa-dollar-sign"></i>
                    </div>
                </div>
                <div class="card-content">
                    <div class="stats-info">
                        <h3 class="stats-number" id="revenueCount" data-target="@ViewBag.WeeklyRevenue">@ViewBag.WeeklyRevenue Ä‘</h3>
                        <h6 class="stats-title">Tá»•ng doanh thu</h6>
                    </div>
                    <div class="stats-trend trend-negative">
                        <i class="fas fa-arrow-down"></i>
                        <span class="trend-value" id="revenuePercent">0%</span>
                        <small class="trend-label">so vá»›i tuáº§n trÆ°á»›c</small>
                    </div>
                </div>
            </div>
        </div>
        
        <div class="col-lg-3 col-md-6 mb-4">
            <div class="modern-stats-card card-products">
                <div class="card-background">
                    <div class="card-icon">
                        <i class="fas fa-hamburger"></i>
                    </div>
                </div>
                <div class="card-content">
                    <div class="stats-info">
                        <h3 class="stats-number" id="productsCount" data-target="@ViewBag.NewProductsThisWeek">@ViewBag.NewProductsThisWeek</h3>
                        <h6 class="stats-title">Sáº£n pháº©m</h6>
                    </div>
                    <div class="stats-trend trend-positive">
                        <i class="fas fa-arrow-up"></i>
                        <span class="trend-value" id="productsPercent">0%</span>
                        <small class="trend-label">sáº£n pháº©m má»›i</small>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Real-time Updates Indicator -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="realtime-indicator">
                <div class="pulse-dot"></div>
                <span>Cáº­p nháº­t thá»i gian thá»±c</span>
                <small id="lastUpdate">Cáº­p nháº­t láº§n cuá»‘i: <span id="updateTime"></span></small>
            </div>
        </div>
    </div>

    <!-- Quick Actions -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="card">
                <div class="card-header">
                    <h5 class="card-title mb-0">
                        <i class="fas fa-bolt text-jollibee-red me-2"></i>
                        Thao tÃ¡c nhanh
                    </h5>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-lg-3 col-md-6 mb-3">
                            <a href="~/Admin/Category/Create" class="quick-action-card">
                                <div class="quick-action-icon bg-jollibee-red">
                                    <i class="fas fa-plus"></i>
                                </div>
                                <div class="quick-action-content">
                                    <h6>Thêm danh má»¥c</h6>
                                    <p>Táº¡o danh má»¥c má»›i</p>
                                </div>
                            </a>
                        </div>
                        <div class="col-lg-3 col-md-6 mb-3">
                            <a href="~/Admin/Product/Create" class="quick-action-card">
                                <div class="quick-action-icon bg-jollibee-orange">
                                    <i class="fas fa-hamburger"></i>
                                </div>
                                <div class="quick-action-content">
                                    <h6>Thêm sản phẩm</h6>
                                    <p>Tạo sản phẩm mới</p>
                                </div>
                            </a>
                        </div>
                        <div class="col-lg-3 col-md-6 mb-3">
                            <a href="~/Admin/Category" class="quick-action-card">
                                <div class="quick-action-icon bg-jollibee-yellow">
                                    <i class="fas fa-list"></i>
                                </div>
                                <div class="quick-action-content">
                                    <h6>Quản lý danh mục</h6>
                                    <p>Xem tất cả danh mục</p>
                                </div>
                            </a>
                        </div>
                        <div class="col-lg-3 col-md-6 mb-3">
                            <a href="~/Admin/Product" class="quick-action-card">
                                <div class="quick-action-icon" style="background: linear-gradient(135deg, #28a745 0%, #20c997 100%);">
                                    <i class="fas fa-box"></i>
                                </div>
                                <div class="quick-action-content">
                                    <h6>Quản lý sản phẩm</h6>
                                    <p>Xem tất cả sản phẩm</p>
                                </div>
                            </a>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Recent Activity -->
    <div class="row">
        <div class="col-lg-6">
            <div class="card">
                <div class="card-header">
                    <h5 class="card-title mb-0">
                        <i class="fas fa-clock text-jollibee-red me-2"></i>
                        ÄÆ¡n hÃ ng gáº§n Ä‘Ã¢y
                    </h5>
                </div>
                <div class="card-body">
                    @if (ViewBag.RecentOrders != null && ((IEnumerable<dynamic>)ViewBag.RecentOrders).Any())
                    {
                        <div class="table-responsive">
                            <table class="table table-sm">
                                <thead>
                                    <tr>
                                        <th>ID</th>
                                        <th>KhÃ¡ch hÃ ng</th>
                                        <th>Tá»•ng tiá»n</th>
                                        <th>NgÃ y Ä‘áº·t</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var order in (IEnumerable<dynamic>)ViewBag.RecentOrders)
                                    {
                                        <tr>
                                            <td>#@order.OrderID</td>
                                            <td>@order.User?.Username</td>
                                            <td>@order.TotalAmount.ToString("C0", new System.Globalization.CultureInfo("vi-VN"))</td>
                                            <td>@order.OrderDate.ToString("dd/MM/yyyy")</td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    }
                    else
                    {
                        <p class="text-muted text-center py-3">Chưa có đơn hàng nào</p>
                    }
                </div>
            </div>
        </div>
        <div class="col-lg-6">
            <div class="card">
                <div class="card-header">
                    <h5 class="card-title mb-0">
                        <i class="fas fa-star text-jollibee-yellow me-2"></i>
                        Sáº£n pháº©m má»›i nháº¥t
                    </h5>
                </div>
                <div class="card-body">
                    @if (ViewBag.RecentProducts != null && ((IEnumerable<dynamic>)ViewBag.RecentProducts).Any())
                    {
                        <div class="recent-products">
                            @foreach (var product in (IEnumerable<dynamic>)ViewBag.RecentProducts)
                            {
                                <div class="recent-product-item">
                                    <div class="product-image">
                                        @if (!string.IsNullOrEmpty(product.ImageUrl))
                                        {
                                            <img src="@product.ImageUrl" alt="@product.ProductName" />
                                        }
                                        else
                                        {
                                            <div class="no-image">
                                                <i class="fas fa-image"></i>
                                            </div>
                                        }
                                    </div>
                                    <div class="product-info">
                                        <h6>@product.ProductName</h6>
                                        <p class="text-muted">@product.Category?.CategoryName</p>
                                        <span class="badge bg-jollibee-red">@product.Price.ToString("C0", new System.Globalization.CultureInfo("vi-VN"))</span>
                                    </div>
                                </div>
                            }
                        </div>
                    }
                    else
                    {
                        <p class="text-muted text-center py-3">Chưa có sản phẩm nào</p>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

<style>
/* Minimal styles for quick actions and recent products only */
.quick-action-card {
    display: block;
    text-decoration: none;
    color: inherit;
    background: white;
    border-radius: 10px;
    padding: 20px;
    box-shadow: 0 2px 10px rgba(0,0,0,0.1);
    transition: all 0.3s ease;
    height: 100%;
}

.quick-action-card:hover {
    transform: translateY(-5px);
    box-shadow: 0 5px 20px rgba(0,0,0,0.15);
    text-decoration: none;
    color: inherit;
}

.quick-action-icon {
    width: 50px;
    height: 50px;
    border-radius: 10px;
    display: flex;
    align-items: center;
    justify-content: center;
    color: white;
    font-size: 1.5rem;
    margin-bottom: 15px;
}

.quick-action-content h6 {
    font-weight: 600;
    margin-bottom: 5px;
}

.quick-action-content p {
    margin: 0;
    color: #6c757d;
    font-size: 0.875rem;
}

.recent-product-item {
    display: flex;
    align-items: center;
    padding: 10px 0;
    border-bottom: 1px solid #f1f1f1;
}

.recent-product-item:last-child {
    border-bottom: none;
}

.product-image {
    width: 50px;
    height: 50px;
    border-radius: 8px;
    overflow: hidden;
    margin-right: 15px;
    flex-shrink: 0;
}

.product-image img {
    width: 100%;
    height: 100%;
    object-fit: cover;
}

.no-image {
    width: 100%;
    height: 100%;
    background: #f8f9fa;
    display: flex;
    align-items: center;
    justify-content: center;
    color: #6c757d;
}

.product-info h6 {
    margin: 0 0 5px 0;
    font-size: 0.9rem;
}

.product-info p {
    margin: 0 0 5px 0;
    font-size: 0.8rem;
}
</style>

<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

<script>
document.addEventListener('DOMContentLoaded', function() {
    // Modern Dashboard JavaScript
    initializeDashboard();
    
    function initializeDashboard() {
        animateNumbers();
        startRealTimeUpdates();
        addInteractiveEffects();
    }
    
    function animateNumbers() {
        const numberElements = document.querySelectorAll('.stats-number');
        
        numberElements.forEach(element => {
            const target = parseInt(element.dataset.target) || 0;
            const duration = 2500;
            const startTime = performance.now();
            
            function updateNumber(currentTime) {
                const elapsed = currentTime - startTime;
                const progress = Math.min(elapsed / duration, 1);
                
                // Easing function for smooth animation
                const easeOutQuart = 1 - Math.pow(1 - progress, 4);
                const current = Math.floor(target * easeOutQuart);
                
                if (element.id === 'revenueCount') {
                    element.textContent = current.toLocaleString('vi-VN') + ' Ä‘';
                } else {
                    element.textContent = current.toLocaleString('vi-VN');
                }
                
                if (progress < 1) {
                    requestAnimationFrame(updateNumber);
                } else {
                    // Add completion effect
                    element.style.transform = 'scale(1.05)';
                    setTimeout(() => {
                        element.style.transform = 'scale(1)';
                    }, 200);
                }
            }
            
            // Start animation with delay for staggered effect
            const delay = Array.from(numberElements).indexOf(element) * 200;
            setTimeout(() => {
                requestAnimationFrame(updateNumber);
            }, delay);
        });
    }
    
    function startRealTimeUpdates() {
        updateTime();
        setInterval(updateTime, 1000);
        
        // Simulate real-time data updates every 8 seconds
        setInterval(() => {
            updateStatsWithAnimation();
        }, 8000);
        
        // Update trend percentages every 12 seconds
        setInterval(() => {
            updateTrendPercentages();
        }, 12000);
    }
    
    function updateTime() {
        const now = new Date();
        const timeString = now.toLocaleString('vi-VN', {
            hour: '2-digit',
            minute: '2-digit',
            second: '2-digit',
            day: '2-digit',
            month: '2-digit',
            year: 'numeric'
        });
        
        const updateTimeElement = document.getElementById('updateTime');
        if (updateTimeElement) {
            updateTimeElement.textContent = timeString;
        }
    }
    
    function updateStatsWithAnimation() {
        const stats = [
            { id: 'usersCount', change: Math.floor(Math.random() * 5) + 1 },
            { id: 'ordersCount', change: Math.floor(Math.random() * 3) + 1 },
            { id: 'productsCount', change: Math.floor(Math.random() * 2) + 1 }
        ];
        
        stats.forEach(stat => {
            const element = document.getElementById(stat.id);
            if (element) {
                const currentValue = parseInt(element.textContent.replace(/[^\d]/g, ''));
                const newValue = currentValue + stat.change;
                
                // Add updating class for animation
                element.classList.add('updating');
                
                // Animate to new value
                setTimeout(() => {
                    if (stat.id === 'revenueCount') {
                        element.textContent = newValue.toLocaleString('vi-VN') + ' Ä‘';
                    } else {
                        element.textContent = newValue.toLocaleString('vi-VN');
                    }
                    
                    element.classList.remove('updating');
                }, 300);
            }
        });
        
        // Show notification
        showUpdateNotification();
    }
    
    function updateTrendPercentages() {
        const trends = [
            { id: 'usersPercent', min: 8, max: 25 },
            { id: 'ordersPercent', min: 2, max: 15 },
            { id: 'revenuePercent', min: 5, max: 20 },
            { id: 'productsPercent', min: 3, max: 12 }
        ];
        
        trends.forEach(trend => {
            const element = document.getElementById(trend.id);
            if (element) {
                const newPercent = Math.floor(Math.random() * (trend.max - trend.min)) + trend.min;
                
                // Add fade effect
                element.style.opacity = '0.5';
                setTimeout(() => {
                    element.textContent = newPercent + '%';
                    element.style.opacity = '1';
                }, 150);
            }
        });
    }
    
    function addInteractiveEffects() {
        const cards = document.querySelectorAll('.modern-stats-card');
        
        cards.forEach(card => {
            // Add click effect
            card.addEventListener('click', function() {
                this.style.transform = 'translateY(-8px) scale(0.98)';
                setTimeout(() => {
                    this.style.transform = 'translateY(-8px) scale(1)';
                }, 150);
            });
            
            // Add hover sound effect (optional)
            card.addEventListener('mouseenter', function() {
                // You can add sound effects here if needed
                this.style.transition = 'all 0.3s cubic-bezier(0.4, 0, 0.2, 1)';
            });
        });
        
        // Add keyboard navigation
        cards.forEach((card, index) => {
            card.setAttribute('tabindex', '0');
            card.addEventListener('keydown', function(e) {
                if (e.key === 'Enter' || e.key === ' ') {
                    this.click();
                }
            });
        });
    }
    
    @* function showUpdateNotification() {
        // Create notification element
        const notification = document.createElement('div');
        notification.className = 'update-notification';
        notification.innerHTML = `
            <i class="fas fa-sync-alt"></i>
            <span>Dá»¯ liá»‡u Ä‘Ã£ Ä‘Æ°á»£c cáº­p nháº­t</span>
        `;
        
        // Style the notification
        Object.assign(notification.style, {
            position: 'fixed',
            top: '20px',
            right: '20px',
            background: 'linear-gradient(135deg, #48bb78, #38a169)',
            color: 'white',
            padding: '12px 20px',
            borderRadius: '25px',
            boxShadow: '0 4px 15px rgba(72, 187, 120, 0.3)',
            display: 'flex',
            alignItems: 'center',
            gap: '8px',
            fontSize: '0.875rem',
            fontWeight: '600',
            zIndex: '1000',
            transform: 'translateX(100%)',
            transition: 'transform 0.3s ease'
        });
        
        document.body.appendChild(notification);
        
        // Animate in
        setTimeout(() => {
            notification.style.transform = 'translateX(0)';
        }, 100);
        
        // Animate out and remove
        setTimeout(() => {
            notification.style.transform = 'translateX(100%)';
            setTimeout(() => {
                notification.remove();
            }, 300);
        }, 3000);
    } *@
    
    // Add performance monitoring
    function monitorPerformance() {
        const observer = new PerformanceObserver((list) => {
            const entries = list.getEntries();
            entries.forEach((entry) => {
                if (entry.entryType === 'measure') {
                    console.log(`${entry.name}: ${entry.duration}ms`);
                }
            });
        });
        
        observer.observe({ entryTypes: ['measure'] });
    }
    
    // Initialize performance monitoring in development
    if (window.location.hostname === 'localhost') {
        monitorPerformance();
    }
    
    // Add progressive enhancement
    if ('IntersectionObserver' in window) {
        const observer = new IntersectionObserver((entries) => {
            entries.forEach(entry => {
                if (entry.isIntersecting) {
                    entry.target.classList.add('animate-in');
                }
            });
        });
        
        document.querySelectorAll('.modern-stats-card').forEach(card => {
            observer.observe(card);
        });
    }
    
    // Enhanced real-time updates with API
    function fetchStatsFromServer() {
        return fetch('/Admin/api/GetDashboardStats')
            .then(response => response.json())
            .then(result => {
                if (result.success) {
                    return {
                        users: result.data.users,
                        orders: result.data.orders,
                        revenue: result.data.revenue,
                        products: result.data.products,
                        trends: result.data.trends
                    };
                } else {
                    throw new Error(result.error);
                }
            })
            .catch(error => {
                console.error('Error fetching stats:', error);
                // Fallback to simulation if API fails
                return {
                    users: Math.floor(Math.random() * 20) + 5,
                    orders: Math.floor(Math.random() * 10) + 2,
                    revenue: Math.floor(Math.random() * 1000000) + 500000,
                    products: Math.floor(Math.random() * 5) + 1
                };
            });
    }
    
    function updateStatsFromApi() {
        fetchStatsFromServer().then(data => {
            // Update numbers
            const usersElement = document.getElementById('usersCount');
            const ordersElement = document.getElementById('ordersCount');
            const revenueElement = document.getElementById('revenueCount');
            const productsElement = document.getElementById('productsCount');
            
            if (usersElement) {
                animateNumberUpdate(usersElement, data.users);
            }
            if (ordersElement) {
                animateNumberUpdate(ordersElement, data.orders);
            }
            if (revenueElement) {
                animateNumberUpdate(revenueElement, data.revenue, true);
            }
            if (productsElement) {
                animateNumberUpdate(productsElement, data.products);
            }
            
            // Update trends if available
            if (data.trends) {
                const elements = {
                    'usersPercent': data.trends.usersPercent,
                    'ordersPercent': data.trends.ordersPercent,
                    'revenuePercent': data.trends.revenuePercent,
                    'productsPercent': data.trends.productsPercent
                };
                
                Object.keys(elements).forEach(id => {
                    const element = document.getElementById(id);
                    if (element) {
                        element.style.opacity = '0.5';
                        setTimeout(() => {
                            element.textContent = elements[id] + '%';
                            element.style.opacity = '1';
                        }, 150);
                    }
                });
            }
            
            // Show update notification
            showApiUpdateNotification();
        });
    }
    
    function animateNumberUpdate(element, newValue, isCurrency = false) {
        const currentValue = parseInt(element.textContent.replace(/[^\d]/g, ''));
        
        if (currentValue === newValue) return;
        
        element.classList.add('updating');
        
        const duration = 800;
        const startTime = performance.now();
        
        function updateNumber(currentTime) {
            const elapsed = currentTime - startTime;
            const progress = Math.min(elapsed / duration, 1);
            const easeOut = 1 - Math.pow(1 - progress, 3);
            const current = Math.floor(currentValue + (newValue - currentValue) * easeOut);
            
            if (isCurrency) {
                element.textContent = current.toLocaleString('vi-VN') + ' Ä‘';
            } else {
                element.textContent = current.toLocaleString('vi-VN');
            }
            
            if (progress < 1) {
                requestAnimationFrame(updateNumber);
            } else {
                element.classList.remove('updating');
            }
        }
        
        requestAnimationFrame(updateNumber);
    }
    
    @* function showApiUpdateNotification() {
        const notification = document.createElement('div');
        notification.className = 'api-update-notification';
        notification.innerHTML = `
            <i class="fas fa-sync-alt"></i>
            <span>Dá»¯ liá»‡u Ä‘Æ°á»£c cáº­p nháº­t tá»« server</span>
        `;
        
        Object.assign(notification.style, {
            position: 'fixed',
            top: '20px',
            right: '20px',
            background: 'linear-gradient(135deg, #48bb78, #38a169)',
            color: 'white',
            padding: '12px 20px',
            borderRadius: '25px',
            boxShadow: '0 4px 15px rgba(72, 187, 120, 0.3)',
            display: 'flex',
            alignItems: 'center',
            gap: '8px',
            fontSize: '0.875rem',
            fontWeight: '600',
            zIndex: '1000',
            transform: 'translateX(100%)',
            transition: 'transform 0.3s ease'
        });
        
        document.body.appendChild(notification);
        
        setTimeout(() => {
            notification.style.transform = 'translateX(0)';
        }, 100);
        
        setTimeout(() => {
            notification.style.transform = 'translateX(100%)';
            setTimeout(() => {
                notification.remove();
            }, 200);
        }, 3000 );
    } *@
    
    // Start real-time updates every 10 seconds
    setInterval(updateStatsFromApi, 10000);
    
    // Initial load after 6 seconds
    setTimeout(updateStatsFromApi, 10000);
});
</script>



