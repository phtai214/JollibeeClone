@model JollibeeClone.ViewModels.PromotionViewModel

@{
    ViewData["Title"] = "Chi tiết Voucher";
    var statusClass = Model.EndDate < DateTime.Today ? "expired" : Model.StartDate > DateTime.Today ? "upcoming" : Model.IsActive ? "running" : "inactive";
    var statusText = Model.EndDate < DateTime.Today ? "Đã hết hạn" : Model.StartDate > DateTime.Today ? "Sắp diễn ra" : Model.IsActive ? "Đang hoạt động" : "Không hoạt động";
    var statusBadgeClass = Model.EndDate < DateTime.Today ? "expired" : Model.StartDate > DateTime.Today ? "upcoming" : Model.IsActive ? "active" : "inactive";
    var usagePercentage = Model.MaxUses.HasValue ? (double)Model.UsesCount / Model.MaxUses.Value * 100 : 0;
}

@section Styles {
    <link rel="stylesheet" href="~/css/promotion-admin.css" asp-append-version="true" />
}

<div class="promotion-management">
    <!-- Header -->
    <div class="promotion-header">
        <div class="d-flex justify-content-between align-items-center">
            <div>
                <h2 class="page-title">
                    <i class="fas fa-eye text-jollibee-red me-2"></i>
                    Chi tiết Voucher
                </h2>
                <p class="text-muted mb-0">Thông tin chi tiết voucher: <strong>@Model.PromotionName</strong></p>
            </div>
            <div class="d-flex gap-2">
                <button onclick="togglePromotionStatus(@Model.PromotionID)" class="btn btn-warning" id="toggle-@Model.PromotionID">
                    <i class="fas fa-@(Model.IsActive ? "pause" : "play") me-2"></i>
                    @(Model.IsActive ? "Tạm dừng" : "Kích hoạt")
                </button>
                @if (!string.IsNullOrEmpty(Model.CouponCode))
                {
                    <button onclick="copyToClipboard('@Model.CouponCode')" class="btn btn-info">
                        <i class="fas fa-copy me-2"></i>
                        Sao chép mã
                    </button>
                }
                <button onclick="refreshStatistics()" class="btn btn-secondary">
                    <i class="fas fa-sync-alt me-2"></i>
                    Làm mới
                </button>
                <a href="@Url.Action("Edit", new { id = Model.PromotionID })" class="btn btn-warning">
                    <i class="fas fa-edit me-2"></i>
                    Chỉnh sửa
                </a>
                <a href="@Url.Action("Index")" class="btn btn-secondary">
                    <i class="fas fa-arrow-left me-2"></i>
                    Quay lại
                </a>
            </div>
        </div>
    </div>

    <!-- Alert Messages -->
    @if (TempData["SuccessMessage"] != null)
    {
        <div class="alert alert-success alert-dismissible fade show" role="alert">
            <i class="fas fa-check-circle me-2"></i>
            @TempData["SuccessMessage"]
            <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
        </div>
    }

    @if (TempData["ErrorMessage"] != null)
    {
        <div class="alert alert-danger alert-dismissible fade show" role="alert">
            <i class="fas fa-exclamation-circle me-2"></i>
            @TempData["ErrorMessage"]
            <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
        </div>
    }

    <div class="row">
        <!-- Main Information Card -->
        <div class="col-lg-8">
            <div class="promotion-card @statusClass mb-4">
                <!-- Card Header -->
                <div class="promotion-card-header">
                    <div class="status-indicator">
                        <span class="status-badge @statusBadgeClass">@statusText</span>
                    </div>
                    
                    <h3 class="promotion-title">@Model.PromotionName</h3>
                    
                    @if (!string.IsNullOrEmpty(Model.CouponCode))
                    {
                        <div class="promotion-code">@Model.CouponCode</div>
                    }
                    
                    @if (!string.IsNullOrEmpty(Model.Description))
                    {
                        <p class="promotion-description">@Model.Description</p>
                    }
                </div>

                <!-- Card Body -->
                <div class="promotion-card-body">
                    <!-- Discount Display -->
                    <div class="discount-display">
                        <div class="discount-value">@Model.DiscountValue%</div>
                        <div class="discount-type">Giảm @Model.DiscountType</div>
                    </div>

                    <!-- Date Range -->
                    <div class="date-range">
                        <div class="date-item">
                            <div class="date-label">Bắt đầu</div>
                            <div class="date-value">@Model.StartDate.ToString("dd/MM/yyyy")</div>
                            <div class="text-muted small">@Model.StartDate.ToString("HH:mm")</div>
                        </div>
                        <div class="date-separator">
                            <i class="fas fa-arrow-right"></i>
                        </div>
                        <div class="date-item">
                            <div class="date-label">Kết thúc</div>
                            <div class="date-value">@Model.EndDate.ToString("dd/MM/yyyy")</div>
                            <div class="text-muted small">@Model.EndDate.ToString("HH:mm")</div>
                        </div>
                    </div>

                    <!-- Usage Progress -->
                    @if (Model.MaxUses.HasValue)
                    {
                        <div class="usage-progress">
                            <div class="usage-info">
                                <span class="usage-label">Đã sử dụng: @Model.UsesCount/@Model.MaxUses</span>
                                <span class="usage-percentage">@usagePercentage.ToString("F1")%</span>
                            </div>
                            <div class="progress">
                                <div class="progress-bar" style="width: @(usagePercentage)%"></div>
                            </div>
                        </div>
                    }
                    else
                    {
                        <div class="usage-progress">
                            <div class="usage-info">
                                <span class="usage-label">Đã sử dụng: @Model.UsesCount lần</span>
                                <span class="usage-percentage">Không giới hạn</span>
                            </div>
                        </div>
                    }

                    @if (Model.MinOrderValue.HasValue)
                    {
                        <div class="text-center mt-3 p-3 bg-light rounded">
                            <i class="fas fa-shopping-cart text-jollibee-red me-2"></i>
                            <strong>Đơn hàng tối thiểu: @Model.MinOrderValue.Value.ToString("N0") VNĐ</strong>
                        </div>
                    }

                    @if (Model.MaxUsesPerUser.HasValue)
                    {
                        <div class="text-center mt-2 p-2 bg-info bg-opacity-10 rounded">
                            <i class="fas fa-user text-info me-2"></i>
                            <small>Tối đa @Model.MaxUsesPerUser lần/khách hàng</small>
                        </div>
                    }
                </div>

                <!-- Card Actions -->
                <div class="promotion-actions">
                    <a href="@Url.Action("Edit", new { id = Model.PromotionID })" class="action-btn btn-edit">
                        <i class="fas fa-edit"></i>
                        Chỉnh sửa
                    </a>
                    <a href="@Url.Action("Delete", new { id = Model.PromotionID })" class="action-btn btn-delete">
                        <i class="fas fa-trash"></i>
                        Xóa
                    </a>
                    <a href="@Url.Action("Index")" class="action-btn btn-view">
                        <i class="fas fa-list"></i>
                        Danh sách
                    </a>
                </div>
            </div>
        </div>

        <!-- Statistics Sidebar -->
        <div class="col-lg-4">
            <!-- Quick Stats -->
            <div class="promotion-form mb-4">
                <div class="form-section">
                    <h3 class="section-title">
                        <i class="fas fa-chart-bar me-2"></i>
                        Thống kê nhanh
                    </h3>
                    
                    <div class="promotion-stats">
                        <div class="stat-item">
                            <span class="stat-number">@Model.UsesCount</span>
                            <span class="stat-label">Lần sử dụng</span>
                        </div>
                        <div class="stat-item">
                            <span class="stat-number">@(Model.MaxUses.HasValue ? Model.MaxUses.Value - Model.UsesCount : "âˆž")</span>
                            <span class="stat-label">Còn lại</span>
                        </div>
                    </div>

                    @if (Model.MaxUses.HasValue)
                    {
                        <div class="mt-3">
                            <div class="progress">
                                <div class="progress-bar bg-success" style="width: @(usagePercentage)%"></div>
                            </div>
                            <div class="text-center mt-2">
                                <small class="text-muted">@usagePercentage.ToString("F1")% đã sử dụng</small>
                            </div>
                        </div>
                    }

                    <!-- Days calculation -->
                    @{
                        var daysTotal = (Model.EndDate - Model.StartDate).Days + 1;
                        var daysRemaining = (Model.EndDate - DateTime.Today).Days;
                        var daysElapsed = (DateTime.Today - Model.StartDate).Days;
                    }

                    <div class="mt-4">
                        <h6>Thời gian</h6>
                        <div class="row text-center">
                            <div class="col-4">
                                <div class="text-jollibee-red fw-bold">@daysTotal</div>
                                <small class="text-muted">Tổng ngày</small>
                            </div>
                            <div class="col-4">
                                <div class="text-success fw-bold">@(Math.Max(0, daysElapsed))</div>
                                <small class="text-muted">Đã trước</small>
                            </div>
                            <div class="col-4">
                                <div class="text-warning fw-bold">@(Math.Max(0, daysRemaining))</div>
                                <small class="text-muted">Còn lại</small>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- System Information -->
            <div class="promotion-form">
                <div class="form-section">
                    <h3 class="section-title">
                        <i class="fas fa-info-circle me-2"></i>
                        Thông tin hệ thống
                    </h3>
                    
                    <table class="table table-sm">
                        <tr>
                            <td><strong>ID Voucher:</strong></td>
                            <td>@Model.PromotionID</td>
                        </tr>
                        <tr>
                            <td><strong>Loại giảm giá:</strong></td>
                            <td>@Model.DiscountType</td>
                        </tr>
                        <tr>
                            <td><strong>Trạng thái:</strong></td>
                            <td><span class="status-badge @statusBadgeClass">@statusText</span></td>
                        </tr>
                        <tr>
                            <td><strong>Ngày tạo:</strong></td>
                            <td>@DateTime.Now.ToString("dd/MM/yyyy")</td>
                        </tr>
                    </table>
                </div>
            </div>
        </div>
    </div>

    <!-- User Usage Statistics -->
    <div class="row mt-4">
        <div class="col-12">
            <div class="promotion-form">
                <div class="form-section">
                    <h3 class="section-title">
                        <i class="fas fa-users me-2"></i>
                        Lịch sử sử dụng voucher
                        <span class="badge bg-jollibee-red ms-2" id="usage-count-badge">@Model.UsesCount</span>
                    </h3>

                    <div class="d-flex justify-content-between align-items-center mb-3">
                        <p class="text-muted mb-0">Danh sách khách hàng đã sử dụng voucher này</p>
                        <button onclick="refreshUsageStats()" class="btn btn-sm btn-outline-primary">
                            <i class="fas fa-sync-alt me-1"></i>
                            Làm mới
                        </button>
                    </div>

                    <!-- Usage Summary Cards -->
                    <div class="row mb-4" id="usage-summary">
                        <div class="col-md-3">
                            <div class="card text-center">
                                <div class="card-body">
                                    <h5 class="card-title text-primary mb-1" id="total-users">0</h5>
                                    <p class="card-text small text-muted">Tổng khách hàng</p>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-3">
                            <div class="card text-center">
                                <div class="card-body">
                                    <h5 class="card-title text-success mb-1" id="total-discount">0 VNĐ</h5>
                                    <p class="card-text small text-muted">Tổng giảm giá</p>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-3">
                            <div class="card text-center">
                                <div class="card-body">
                                    <h5 class="card-title text-warning mb-1" id="avg-discount">0 VNĐ</h5>
                                    <p class="card-text small text-muted">TB giảm giá/người</p>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-3">
                            <div class="card text-center">
                                <div class="card-body">
                                    <h5 class="card-title text-info mb-1" id="recent-usage">0</h5>
                                    <p class="card-text small text-muted">Sử dụng hôm nay</p>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Usage Table -->
                    <div id="usage-stats-container">
                        <div class="text-center py-4">
                            <div class="spinner-border text-primary" role="status">
                                <span class="visually-hidden">Đang tải...</span>
                            </div>
                            <p class="mt-2 text-muted">Đang tải dữ liệu...</p>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Scope Information -->
    <div class="row mt-4">
        <div class="col-12">
            <div class="promotion-form">
                <div class="form-section">
                    <h3 class="section-title">
                        <i class="fas fa-target me-2"></i>
                        Phạm vi áp dụng
                    </h3>

                    <!-- Tabs Navigation -->
                    <ul class="nav nav-tabs" id="scopeTabs" role="tablist">
                        <li class="nav-item" role="presentation">
                            <button class="nav-link active" id="products-tab" data-bs-toggle="tab" data-bs-target="#products" type="button" role="tab">
                                <i class="fas fa-box me-2"></i>
                                Sản phẩm áp dụng (@Model.SelectedProducts.Count)
                            </button>
                        </li>
                        <li class="nav-item" role="presentation">
                            <button class="nav-link" id="categories-tab" data-bs-toggle="tab" data-bs-target="#categories" type="button" role="tab">
                                <i class="fas fa-tags me-2"></i>
                                Danh mục áp dụng (@Model.SelectedCategories.Count)
                            </button>
                        </li>
                    </ul>

                    <!-- Tabs Content -->
                    <div class="tab-content" id="scopeTabsContent">
                        <!-- Products Tab -->
                        <div class="tab-pane fade show active" id="products" role="tabpanel">
                            <div class="mt-3">
                                @if (Model.SelectedProducts.Any())
                                {
                                    <div class="row">
                                        @foreach (var product in Model.SelectedProducts)
                                        {
                                            <div class="col-md-6 col-lg-4 mb-3">
                                                <div class="card h-100">
                                                    <div class="card-body">
                                                        <h6 class="card-title">@product.ProductName</h6>
                                                        <p class="card-text text-muted small">@product.Price.ToString("N0") VNĐ</p>
                                                            @if (!string.IsNullOrEmpty(product.ShortDescription))
                                                        {
                                                            <p class="card-text small">@product.ShortDescription</p>
                                                        }
                                                    </div>
                                                </div>
                                            </div>
                                        }
                                    </div>
                                }
                                else
                                {
                                    <div class="text-center py-4">
                                        <i class="fas fa-box fa-3x text-muted mb-3"></i>
                                        <h5 class="text-muted">Chưa có sản phẩm nào được chọn</h5>
                                        <p class="text-muted">Voucher này chưa được áp dụng cho sản phẩm cụ thể nào.</p>
                                    </div>
                                }
                            </div>
                        </div>

                        <!-- Categories Tab -->
                        <div class="tab-pane fade" id="categories" role="tabpanel">
                            <div class="mt-3">
                                @if (Model.SelectedCategories.Any())
                                {
                                    <div class="row">
                                        @foreach (var category in Model.SelectedCategories)
                                        {
                                            <div class="col-md-6 col-lg-4 mb-3">
                                                <div class="card h-100">
                                                    <div class="card-body">
                                                        <h6 class="card-title">@category.CategoryName</h6>
                                                        @if (!string.IsNullOrEmpty(category.Description))
                                                        {
                                                            <p class="card-text small">@category.Description</p>
                                                        }
                                                        <span class="badge bg-jollibee-red">
                                                            <i class="fas fa-tag me-1"></i>
                                                            Danh mục
                                                        </span>
                                                    </div>
                                                </div>
                                            </div>
                                        }
                                    </div>
                                }
                                else
                                {
                                    <div class="text-center py-4">
                                        <i class="fas fa-tags fa-3x text-muted mb-3"></i>
                                        <h5 class="text-muted">Chưa có danh mục nào được chọn</h5>
                                        <p class="text-muted">Voucher này chưa được áp dụng cho danh mục sản phẩm nào.</p>
                                    </div>
                                }
                            </div>
                        </div>
                    </div>

                    @if (!Model.SelectedProducts.Any() && !Model.SelectedCategories.Any())
                    {
                        <div class="alert alert-warning mt-3" role="alert">
                            <i class="fas fa-exclamation-triangle me-2"></i>
                            <strong>Lưu ý:</strong> Voucher này chưa được áp dụng cho sản phẩm hoặc danh mục nào. 
                            Hãy <a href="@Url.Action("Edit", new { id = Model.PromotionID })" class="alert-link">chỉnh sửa</a> để thiết lập phạm vi áp dụng.
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        $(document).ready(function() {
            // Real-time statistics update every 30 seconds
            setInterval(refreshStatistics, 30000);
            
            // Animate progress bars
            $('.progress-bar').each(function() {
                const width = $(this).css('width');
                $(this).css('width', '0').animate({ width: width }, 1000);
            });
            
            // Tooltip for elements
            $('[title]').tooltip();
            
            // Auto-refresh countdown
            let countdownSeconds = 30;
            setInterval(function() {
                countdownSeconds--;
                if (countdownSeconds <= 0) {
                    countdownSeconds = 30;
                }
                updateCountdownDisplay(countdownSeconds);
            }, 1000);

            // Load user usage statistics
            loadUsageStatistics();
        });

        // Toggle promotion status
        function togglePromotionStatus(promotionId) {
            const toggleBtn = document.getElementById(`toggle-${promotionId}`);
            const originalContent = toggleBtn.innerHTML;
            
            // Show loading state
            toggleBtn.innerHTML = '<i class="fas fa-spinner fa-spin me-2"></i>Đang xử lý...';
            toggleBtn.disabled = true;

            fetch(`@Url.Action("ToggleStatus")?id=${promotionId}`, {
                method: 'POST',
                headers: {
                    'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val()
                }
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    showAlert('success', data.message);
                    
                    // Update button UI
                    if (data.isActive) {
                        toggleBtn.innerHTML = '<i class="fas fa-pause me-2"></i>Tạm dừng';
                        updateStatusBadge('active', 'Đang hoạt động');
                    } else {
                        toggleBtn.innerHTML = '<i class="fas fa-play me-2"></i>Kích hoạt';
                        updateStatusBadge('inactive', 'Không hoạt động');
                    }
                    
                    // Refresh statistics after status change
                    setTimeout(refreshStatistics, 1000);
                } else {
                    showAlert('danger', data.message);
                    toggleBtn.innerHTML = originalContent;
                }
                toggleBtn.disabled = false;
            })
            .catch(error => {
                showAlert('danger', 'Có lỗi xảy ra khi thay đổi trạng thái');
                toggleBtn.innerHTML = originalContent;
                toggleBtn.disabled = false;
            });
        }

        // Copy to clipboard
        function copyToClipboard(text) {
            navigator.clipboard.writeText(text).then(() => {
                showAlert('success', 'Đã sao chép mã voucher: ' + text);
            }).catch(() => {
                // Fallback for browsers that don't support clipboard API
                const textArea = document.createElement('textarea');
                textArea.value = text;
                document.body.appendChild(textArea);
                textArea.select();
                document.execCommand('copy');
                document.body.removeChild(textArea);
                showAlert('success', 'Đã sao chép mã voucher: ' + text);
            });
        }

        // Refresh statistics
        function refreshStatistics() {
            const refreshBtn = document.querySelector('[onclick="refreshStatistics()"]');
            const originalContent = refreshBtn.innerHTML;
            
            // Show loading state
            refreshBtn.innerHTML = '<i class="fas fa-spinner fa-spin me-2"></i>Đang tải...';
            refreshBtn.disabled = true;

            fetch(`@Url.Action("GetPromotionStatistics")?id=@Model.PromotionID`)
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        updateStatistics(data);
                        showAlert('success', 'Đã cập nhật thống kê');
                    } else {
                        showAlert('danger', data.message);
                    }
                })
                .catch(error => {
                    showAlert('danger', 'Có lỗi xảy ra khi tải thống kê');
                })
                .finally(() => {
                    refreshBtn.innerHTML = originalContent;
                    refreshBtn.disabled = false;
                });
        }

        // Update statistics in UI
        function updateStatistics(data) {
            // Update usage count
            const usageElements = document.querySelectorAll('.usage-count');
            usageElements.forEach(el => {
                el.textContent = data.usesCount;
            });

            // Update usage percentage and progress bars
            if (data.maxUses) {
                const percentageElements = document.querySelectorAll('.usage-percentage');
                percentageElements.forEach(el => {
                    el.textContent = data.usagePercentage.toFixed(1) + '%';
                });

                const progressBars = document.querySelectorAll('.progress-bar');
                progressBars.forEach(bar => {
                    bar.style.width = data.usagePercentage + '%';
                    bar.setAttribute('aria-valuenow', data.usagePercentage);
                });
            }

            // Update remaining uses
            const remainingElements = document.querySelectorAll('.remaining-uses');
            remainingElements.forEach(el => {
                if (data.remainingUses !== null) {
                    el.textContent = data.remainingUses;
                } else {
                    el.textContent = '∞';
                }
            });

            // Update days remaining
            const daysElements = document.querySelectorAll('.days-remaining');
            daysElements.forEach(el => {
                el.textContent = data.daysRemaining;
            });

            // Update status if changed
            updateStatusBadge(data.status, getStatusText(data.status));
        }

        // Update status badge
        function updateStatusBadge(status, text) {
            const statusBadges = document.querySelectorAll('.status-badge');
            statusBadges.forEach(badge => {
                badge.className = `status-badge ${status}`;
                badge.textContent = text;
            });

            // Update card classes
            const promotionCards = document.querySelectorAll('.promotion-card');
            promotionCards.forEach(card => {
                card.className = card.className.replace(/\b(active|upcoming|expired|inactive|running)\b/g, '');
                card.classList.add(status === 'active' ? 'running' : status);
            });
        }

        // Get status text from status code
        function getStatusText(status) {
            switch (status) {
                case 'active': return 'Đang hoạt động';
                case 'upcoming': return 'Sắp diễn ra';
                case 'expired': return 'Đã hết hạn';
                case 'inactive': return 'Không hoạt động';
                default: return 'Không xác định';
            }
        }

        // Update countdown display
        function updateCountdownDisplay(seconds) {
            const countdownElements = document.querySelectorAll('.refresh-countdown');
            countdownElements.forEach(el => {
                el.textContent = `(${seconds}s)`;
            });
        }

        // Show alert messages
        function showAlert(type, message) {
            const alertHtml = `
                <div class="alert alert-${type} alert-dismissible fade show" role="alert">
                    <i class="fas fa-${type === 'success' ? 'check-circle' : 'exclamation-circle'} me-2"></i>
                    ${message}
                    <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                </div>
            `;
            
            const container = document.querySelector('.promotion-management');
            const alertContainer = container.querySelector('.alert-container') || 
                (() => {
                    const div = document.createElement('div');
                    div.className = 'alert-container';
                    container.insertBefore(div, container.firstChild.nextSibling);
                    return div;
                })();
            
            alertContainer.innerHTML = alertHtml;
            
            // Auto dismiss after 5 seconds
            setTimeout(() => {
                const alert = alertContainer.querySelector('.alert');
                if (alert) {
                    alert.remove();
                }
            }, 5000);
        }

        // Keyboard shortcuts
        document.addEventListener('keydown', function(e) {
            if (e.ctrlKey) {
                switch(e.key) {
                    case 'e':
                        e.preventDefault();
                        window.location.href = '@Url.Action("Edit", new { id = Model.PromotionID })';
                        break;
                    case 'r':
                        e.preventDefault();
                        refreshStatistics();
                        break;
                    case 'c':
                        e.preventDefault();
                        @if (!string.IsNullOrEmpty(Model.CouponCode))
                        {
                            <text>copyToClipboard(@Html.Raw(Json.Serialize(Model.CouponCode)));</text>
                        }
                        break;
                }
            }
        });

        // Load user usage statistics
        function loadUsageStatistics() {
            const container = document.getElementById('usage-stats-container');
            console.log('Loading usage statistics for promotion:', @Model.PromotionID);
            
            const url = '/Admin/Promotion/UsageStatistics/' + @Model.PromotionID;
            console.log('API URL:', url);
            
            fetch(url)
                .then(response => {
                    console.log('Response status:', response.status);
                    if (!response.ok) {
                        throw new Error(`HTTP error! status: ${response.status}`);
                    }
                    return response.json();
                })
                .then(data => {
                    console.log('Response data:', data);
                    if (data.success) {
                        updateUsageSummary(data.summary);
                        renderUsageTable(data.usageStats);
                    } else {
                        showUsageError(data.message || 'KhÃ´ng cÃ³ dá»¯ liá»‡u');
                    }
                })
                .catch(error => {
                    console.error('Error loading usage statistics:', error);
                    showUsageError('CÃ³ lá»—i xáº£y ra khi táº£i dá»¯ liá»‡u: ' + error.message);
                });
        }

        // Refresh usage statistics
        function refreshUsageStats() {
            const container = document.getElementById('usage-stats-container');
            container.innerHTML = `
                <div class="text-center py-4">
                    <div class="spinner-border text-primary" role="status">
                        <span class="visually-hidden">Äang táº£i...</span>
                    </div>
                    <p class="mt-2 text-muted">Äang táº£i dá»¯ liá»‡u...</p>
                </div>
            `;
            loadUsageStatistics();
        }

        // Update usage summary cards
        function updateUsageSummary(summary) {
            document.getElementById('total-users').textContent = summary.totalUsers;
            document.getElementById('total-discount').textContent = formatCurrency(summary.totalDiscountGiven);
            document.getElementById('avg-discount').textContent = formatCurrency(summary.averageDiscountPerUser);
            document.getElementById('usage-count-badge').textContent = summary.totalUsers;
            
            // Calculate recent usage (today)
            const today = new Date().toDateString();
            const recentUsage = window.currentUsageStats ? 
                window.currentUsageStats.filter(usage => 
                    new Date(usage.usedDate).toDateString() === today
                ).length : 0;
            document.getElementById('recent-usage').textContent = recentUsage;
        }

        // Render usage statistics table
        function renderUsageTable(usageStats) {
            const container = document.getElementById('usage-stats-container');
            window.currentUsageStats = usageStats; // Store for recent usage calculation

            if (!usageStats || usageStats.length === 0) {
                container.innerHTML = `
                    <div class="text-center py-5">
                        <i class="fas fa-users fa-3x text-muted mb-3"></i>
                        <h5 class="text-muted">ChÆ°a cÃ³ ai sá»­ dá»¥ng voucher nÃ y</h5>
                        <p class="text-muted">Khi cÃ³ khÃ¡ch hÃ ng sá»­ dá»¥ng voucher, thÃ´ng tin sáº½ hiá»ƒn thá»‹ á»Ÿ Ä‘Ã¢y.</p>
                    </div>
                `;
                return;
            }

            let tableHtml = `
                <div class="table-responsive">
                    <table class="table table-hover">
                        <thead class="table-light">
                            <tr>
                                <th><i class="fas fa-user me-1"></i>KhÃ¡ch hÃ ng</th>
                                <th><i class="fas fa-envelope me-1"></i>Email</th>
                                <th><i class="fas fa-tag me-1"></i>Giáº£m giÃ¡</th>
                                <th><i class="fas fa-calendar me-1"></i>NgÃ y sá»­ dá»¥ng</th>
                                <th><i class="fas fa-receipt me-1"></i>ÄÆ¡n hÃ ng</th>
                                @* <th><i class="fas fa-cog me-1"></i>Thao tÃ¡c</th> *@
                            </tr>
                        </thead>
                        <tbody>
            `;

            usageStats.forEach((usage, index) => {
                const usedDate = new Date(usage.usedDate);
                const isToday = usedDate.toDateString() === new Date().toDateString();
                const rowClass = isToday ? 'table-secondary' : '';
                
                tableHtml += `
                    <tr class="${rowClass}">
                        <td>
                            <div class="d-flex align-items-center">
                                <div class="user-avatar me-2">
                                    <i class="fas fa-user-circle fa-2x text-muted"></i>
                                </div>
                                <div>
                                    <strong>${usage.userFullName}</strong>
                                    ${isToday ? '<span class="badge bg-warning text-dark ms-2">HÃ´m nay</span>' : ''}
                                </div>
                            </div>
                        </td>
                        <td>
                            <a href="mailto:${usage.userEmail}" class="text-decoration-none">
                                ${usage.userEmail}
                            </a>
                        </td>
                        <td>
                            <span class="text-success fw-bold">
                                ${formatCurrency(usage.discountAmount)}
                            </span>
                        </td>
                        <td>
                            <div>
                                <strong>${formatDate(usedDate)}</strong>
                                <br><small class="text-muted">${formatTime(usedDate)}</small>
                            </div>
                        </td>
                        <td>
                            ${usage.orderCode ? `
                                <a href="/Admin/Orders/Details/${usage.orderId}" class="text-decoration-none">
                                    <strong>${usage.orderCode}</strong>
                                    ${usage.orderTotal ? `<br><small class="text-muted">${formatCurrency(usage.orderTotal)}</small>` : ''}
                                </a>
                            ` : '<span class="text-muted">KhÃ´ng cÃ³</span>'}
                        </td>
                        @* <td>
                            <div class="btn-group btn-group-sm">
                                <button class="btn btn-outline-primary" onclick="viewUserDetails(${usage.userId})" title="Xem thÃ´ng tin user">
                                    <i class="fas fa-eye"></i>
                                </button>
                                ${usage.orderCode ? `
                                    <a href="/Admin/Orders/Details/${usage.orderId}" class="btn btn-outline-info" title="Xem Ä‘Æ¡n hÃ ng">
                                        <i class="fas fa-receipt"></i>
                                    </a>
                                ` : ''}
                            </div>
                        </td> *@
                    </tr>
                `;
            });

            tableHtml += `
                        </tbody>
                    </table>
                </div>
            `;

            // Add pagination if there are many records
            if (usageStats.length > 10) {
                tableHtml += `
                    <div class="text-center mt-3">
                        <small class="text-muted">Hiá»ƒn thá»‹ ${Math.min(10, usageStats.length)} trong tá»•ng sá»‘ ${usageStats.length} lÆ°á»£t sá»­ dá»¥ng</small>
                    </div>
                `;
            }

            container.innerHTML = tableHtml;
        }

        // Show usage error
        function showUsageError(message) {
            const container = document.getElementById('usage-stats-container');
            container.innerHTML = `
                <div class="text-center py-4">
                    <i class="fas fa-exclamation-triangle fa-3x text-warning mb-3"></i>
                    <h5 class="text-muted">KhÃ´ng thá»ƒ táº£i dá»¯ liá»‡u</h5>
                    <p class="text-muted">${message}</p>
                    <button onclick="refreshUsageStats()" class="btn btn-primary">
                        <i class="fas fa-sync-alt me-1"></i>
                        Thá»­ láº¡i
                    </button>
                </div>
            `;
        }

        // View user details
        function viewUserDetails(userId) {
            // Open user details in a modal or new page
            showAlert('info', 'TÃ­nh nÄƒng xem chi tiáº¿t user sáº½ Ä‘Æ°á»£c phÃ¡t triá»ƒn sau');
        }

        // Utility functions
        function formatCurrency(amount) {
            return new Intl.NumberFormat('vi-VN', {
                style: 'currency',
                currency: 'VND'
            }).format(amount);
        }

        function formatDate(date) {
            return new Intl.DateTimeFormat('vi-VN', {
                year: 'numeric',
                month: '2-digit',
                day: '2-digit'
            }).format(date);
        }

        function formatTime(date) {
            return new Intl.DateTimeFormat('vi-VN', {
                hour: '2-digit',
                minute: '2-digit',
                second: '2-digit'
            }).format(date);
        }

        // Add tooltips for keyboard shortcuts
        $(document).ready(function() {
            $('[href*="Edit"]').attr('title', 'Chá»‰nh sá»­a (Ctrl+E)');
            $('[onclick*="refreshStatistics"]').attr('title', 'LÃ m má»›i (Ctrl+R)');
            @if (!string.IsNullOrEmpty(Model.CouponCode))
            {
                <text>$('[onclick*="copyToClipboard"]').attr('title', 'Sao chÃ©p mÃ£ (Ctrl+C)');</text>
            }
        });
    </script>
} 

