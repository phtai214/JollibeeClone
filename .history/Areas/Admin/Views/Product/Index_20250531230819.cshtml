@model IEnumerable<JollibeeClone.Areas.Admin.Models.Product>

@{
    ViewData["Title"] = "Quản lý sản phẩm";
}

<div class="product-management">
    <!-- Header với nút thêm mới -->
    <div class="d-flex justify-content-between align-items-center mb-4">
        <div>
            <h2 class="page-title">
                <i class="fas fa-hamburger text-jollibee-red me-2"></i>
                Quản lý sản phẩm
            </h2>
            <p class="text-muted">Quản lý tất cả sản phẩm trong cửa hàng</p>
        </div>
        <a href="@Url.Action("Create")" class="btn btn-primary btn-lg">
            <i class="fas fa-plus me-2"></i>
            Thêm sản phẩm mới
        </a>
    </div>

    <!-- Tìm kiếm và bộ lọc -->
    <div class="card mb-4">
        <div class="card-body">
            <div class="row ">
                <div class="col-md-3">
                    <div class="search-box">
                        <i class="fas fa-search search-icon"></i>
                        <input type="text" id="searchInput" class="form-control" placeholder="Tìm kiếm sản phẩm...">
                    </div>
                </div>
                <div class="col-md-2">
                    <select id="categoryFilter" class="form-select">
                        <option value="">Tất cả danh mục</option>
                        @foreach (var product in Model.GroupBy(p => p.Category).Select(g => g.Key).Where(c => c != null))
                        {
                            <option value="@product.CategoryName">@product.CategoryName</option>
                        }
                    </select>
                </div>
                <div class="col-md-2">
                    <select id="statusFilter" class="form-select">
                        <option value="">Tất cả trạng thái</option>
                        <option value="true">Có sẵn</option>
                        <option value="false">Hết hàng</option>
                    </select>
                </div>
                <div class="col-md-2">
                    <select id="priceFilter" class="form-select">
                        <option value="">Tất cả giá</option>
                        <option value="0-50000">0 - 50K</option>
                        <option value="50000-100000">50K - 100K</option>
                        <option value="100000-200000">100K - 200K</option>
                        <option value="200000-999999999">Trên 200K</option>
                    </select>
                </div>
                <div class=" col-md-3 text-end">
                    <div class="view-toggle-group">
                        <button type="button" class="btn btn-outline-secondary view-btn active" data-view="grid" title="Dạng lưới">
                            <i class="fas fa-th"></i>
                        </button>
                        <button type="button" class="btn btn-outline-secondary view-btn" data-view="list" title="Dạng danh sách">
                            <i class="fas fa-list"></i>
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Hiển thị kết quả -->
    <div class="d-flex justify-content-between align-items-center mb-3">
        <span class="result-count">Hiển thị <strong id="visibleCount">@Model.Count()</strong> trên tổng <strong>@Model.Count()</strong> sản phẩm</span>
        <div class="sort-options">
            <select id="sortBy" class="form-select form-select-sm">
                <option value="name">Sắp xếp theo tên</option>
                <option value="price">Sắp xếp theo giá</option>
                <option value="category">Sắp xếp theo danh mục</option>
                <option value="newest">Mới nhất</option>
            </select>
        </div>
    </div>

    <!-- Danh sách sản phẩm - Grid View -->
    @if (Model.Any())
    {
        <div id="gridView" class="row">
            @foreach (var product in Model)
            {
                <div class="col-lg-3 col-md-4 col-sm-6 mb-4 product-item" 
                     data-name="@product.ProductName.ToLower()"
                     data-category="@product.Category?.CategoryName"
                     data-status="@product.IsAvailable.ToString().ToLower()"
                     data-price="@product.Price">
                    <div class="product-card">
                        <div class="product-image">
                            @if (!string.IsNullOrEmpty(product.ImageUrl))
                            {
                                <img src="@product.ImageUrl" alt="@product.ProductName" 
                                     onerror="this.onerror=null; this.src='/assets/images/bee.png';" />
                                <div class="image-error d-none">
                                    <small class="text-danger">Không thể tải ảnh: @product.ImageUrl</small>
                                </div>
                            }
                            else
                            {
                                <div class="no-image">
                                    <i class="fas fa-hamburger"></i>
                                    <small class="text-muted">Chưa có ảnh</small>
                                </div>
                            }
                            <div class="product-overlay">
                                <span class="badge status-badge @(product.IsAvailable ? "status-active" : "status-inactive")">
                                    @(product.IsAvailable ? "Có sẵn" : "Hết hàng")
                                </span>
                                @if (product.IsConfigurable)
                                {
                                    <span class="badge bg-info configurable-badge">
                                        <i class="fas fa-cogs me-1"></i>
                                        Tùy chỉnh
                                    </span>
                                }
                            </div>
                        </div>
                        
                        <div class="product-content">
                            <h5 class="product-title">@product.ProductName</h5>
                            @if (!string.IsNullOrEmpty(product.ShortDescription))
                            {
                                <p class="product-description">@product.ShortDescription</p>
                            }
                            
                            <div class="product-meta">
                                <span class="badge bg-secondary">
                                    <i class="fas fa-folder me-1"></i>
                                    @product.Category?.CategoryName
                                </span>
                            </div>
                            
                            <div class="product-price">
                                @if (product.OriginalPrice.HasValue && product.OriginalPrice > product.Price)
                                {
                                    <span class="original-price">@product.OriginalPrice.Value.ToString("C0", new System.Globalization.CultureInfo("vi-VN"))</span>
                                    <span class="current-price sale">@product.Price.ToString("C0", new System.Globalization.CultureInfo("vi-VN"))</span>
                                    <span class="discount-badge">
                                        -@(Math.Round((decimal)(product.OriginalPrice - product.Price) / product.OriginalPrice.Value * 100, 0))%
                                    </span>
                                }
                                else
                                {
                                    <span class="current-price">@product.Price.ToString("C0", new System.Globalization.CultureInfo("vi-VN"))</span>
                                }
                            </div>
                        </div>
                        
                        <div class="product-actions">
                            <a href="@Url.Action("Details", new { id = product.ProductID })" 
                               class="btn btn-sm btn-outline-info" title="Xem chi tiết">
                                <i class="fas fa-eye"></i>
                            </a>
                            <a href="@Url.Action("Edit", new { id = product.ProductID })" 
                               class="btn btn-sm btn-outline-warning" title="Chỉnh sửa">
                                <i class="fas fa-edit"></i>
                            </a>
                            <a href="@Url.Action("Delete", new { id = product.ProductID })" 
                               class="btn btn-sm btn-outline-danger" title="Xóa">
                                <i class="fas fa-trash"></i>
                            </a>
                        </div>
                    </div>
                </div>
            }
        </div>

        <!-- List View -->
        <div id="listView" class="table-responsive" style="display: none;">
            <table class="table table-hover">
                <thead>
                    <tr>
                        <th>Ảnh</th>
                        <th>Tên sản phẩm</th>
                        <th>Danh mục</th>
                        <th>Giá</th>
                        <th>Trạng thái</th>
                        <th>Tùy chỉnh</th>
                        <th>Thao tác</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var product in Model)
                    {
                        <tr class="product-row" 
                            data-name="@product.ProductName.ToLower()"
                            data-category="@product.Category?.CategoryName"
                            data-status="@product.IsAvailable.ToString().ToLower()"
                            data-price="@product.Price">
                            <td>
                                <div class="table-product-image">
                                    @if (!string.IsNullOrEmpty(product.ImageUrl))
                                    {
                                        <img src="@product.ImageUrl" alt="@product.ProductName" 
                                             onerror="this.onerror=null; this.src='/assets/images/bee.png';" />
                                    }
                                    else
                                    {
                                        <div class="no-image-small">
                                            <i class="fas fa-hamburger"></i>
                                        </div>
                                    }
                                </div>
                            </td>
                            <td>
                                <div class="product-info">
                                    <h6>@product.ProductName</h6>
                                    @if (!string.IsNullOrEmpty(product.ShortDescription))
                                    {
                                        <small class="text-muted">@product.ShortDescription</small>
                                    }
                                </div>
                            </td>
                            <td>
                                <span class="badge bg-secondary">@product.Category?.CategoryName</span>
                            </td>
                            <td>
                                <div class="price-info">
                                    @if (product.OriginalPrice.HasValue && product.OriginalPrice > product.Price)
                                    {
                                        <small class="text-muted text-decoration-line-through">@product.OriginalPrice.Value.ToString("C0", new System.Globalization.CultureInfo("vi-VN"))</small><br>
                                        <strong class="text-danger">@product.Price.ToString("C0", new System.Globalization.CultureInfo("vi-VN"))</strong>
                                    }
                                    else
                                    {
                                        <strong>@product.Price.ToString("C0", new System.Globalization.CultureInfo("vi-VN"))</strong>
                                    }
                                </div>
                            </td>
                            <td>
                                <span class="badge @(product.IsAvailable ? "bg-success" : "bg-danger")">
                                    @(product.IsAvailable ? "Có sẵn" : "Hết hàng")
                                </span>
                            </td>
                            <td>
                                @if (product.IsConfigurable)
                                {
                                    <span class="badge bg-info">
                                        <i class="fas fa-cogs me-1"></i>
                                        Có
                                    </span>
                                }
                                else
                                {
                                    <span class="text-muted">Không</span>
                                }
                            </td>
                            <td>
                                <div class="action-buttons">
                                    <a href="@Url.Action("Details", new { id = product.ProductID })" 
                                       class="btn btn-sm btn-outline-info" title="Xem chi tiết">
                                        <i class="fas fa-eye"></i>
                                    </a>
                                    <a href="@Url.Action("Edit", new { id = product.ProductID })" 
                                       class="btn btn-sm btn-outline-warning" title="Chỉnh sửa">
                                        <i class="fas fa-edit"></i>
                                    </a>
                                    <a href="@Url.Action("Delete", new { id = product.ProductID })" 
                                       class="btn btn-sm btn-outline-danger" title="Xóa">
                                        <i class="fas fa-trash"></i>
                                    </a>
                                </div>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }
    else
    {
        <div class="empty-state">
            <div class="empty-state-icon">
                <i class="fas fa-hamburger"></i>
            </div>
            <h4>Chưa có sản phẩm nào</h4>
            <p>Bắt đầu bằng cách tạo sản phẩm đầu tiên cho cửa hàng của bạn</p>
            <a href="@Url.Action("Create")" class="btn btn-primary">
                <i class="fas fa-plus me-2"></i>
                Tạo sản phẩm đầu tiên
            </a>
        </div>
    }
</div>

<style>
:root {
    --jollibee-red: #E2211C;
    --jollibee-yellow: #FFCD00;
    --jollibee-orange: #FFA500;
    --jollibee-dark: #1a1a1a;
    --jollibee-gray: #f8f9fa;
}

.product-card {
    background: white;
    border-radius: 15px;
    overflow: hidden;
    box-shadow: 0 2px 10px rgba(0,0,0,0.08);
    transition: all 0.3s ease;
    height: 100%;
    display: flex;
    flex-direction: column;
}

.product-card:hover {
    transform: translateY(-5px);
    box-shadow: 0 8px 25px rgba(0,0,0,0.15);
}

.product-image {
    height: 220px;
    position: relative;
    overflow: hidden;
    background: linear-gradient(135deg, var(--jollibee-gray) 0%, #e9ecef 100%);
}

.product-image img {
    width: 100%;
    height: 100%;
    object-fit: cover;
    transition: transform 0.3s ease;
}

.product-card:hover .product-image img {
    transform: scale(1.05);
}

.product-overlay {
    position: absolute;
    top: 15px;
    right: 15px;
    display: flex;
    flex-direction: column;
    gap: 8px;
    align-items: flex-end;
}

.configurable-badge {
    margin-top: 5px;
}

.product-content {
    padding: 20px;
    flex: 1;
}

.product-title {
    font-weight: 600;
    margin-bottom: 10px;
    color: var(--jollibee-dark);
    line-height: 1.3;
}

.product-description {
    color: #6c757d;
    font-size: 0.9rem;
    margin-bottom: 15px;
    line-height: 1.4;
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
}

.product-meta {
    margin-bottom: 15px;
}

.product-price {
    display: flex;
    align-items: center;
    gap: 10px;
    margin-bottom: 0;
}

.original-price {
    color: #6c757d;
    text-decoration: line-through;
    font-size: 0.9rem;
}

.current-price {
    font-weight: 600;
    font-size: 1.1rem;
    color: var(--jollibee-red);
}

.current-price.sale {
    color: var(--jollibee-red);
}

.discount-badge {
    background: var(--jollibee-yellow);
    color: var(--jollibee-dark);
    padding: 2px 8px;
    border-radius: 12px;
    font-size: 0.8rem;
    font-weight: 600;
}

.product-actions {
    padding: 15px 20px;
    background: #f8f9fa;
    border-top: 1px solid #dee2e6;
    display: flex;
    gap: 8px;
}

.table-product-image {
    width: 60px;
    height: 60px;
    border-radius: 8px;
    overflow: hidden;
}

.table-product-image img {
    width: 100%;
    height: 100%;
    object-fit: cover;
}

.no-image {
    width: 100%;
    height: 100%;
    background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    color: #6c757d;
    font-size: 2rem;
    gap: 8px;
}

.no-image small {
    font-size: 0.8rem;
    margin-top: 5px;
}

.no-image-small {
    width: 60px;
    height: 60px;
    background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
    display: flex;
    align-items: center;
    justify-content: center;
    border-radius: 8px;
    color: #6c757d;
    border: 1px solid #dee2e6;
}

.image-error {
    position: absolute;
    bottom: 5px;
    left: 5px;
    right: 5px;
    background: rgba(220, 53, 69, 0.9);
    color: white;
    padding: 2px 5px;
    border-radius: 3px;
    font-size: 0.7rem;
}

.product-image img {
    width: 100%;
    height: 100%;
    object-fit: cover;
    transition: transform 0.3s ease;
    border: none;
}

.product-image img[src*="no-image.svg"] {
    object-fit: contain;
    background: #f8f9fa;
}

.product-info h6 {
    margin: 0;
    font-weight: 600;
}

.result-count {
    font-size: 0.9rem;
    color: #6c757d;
}

.sort-options {
    min-width: 200px;
}

/* View Toggle Buttons */
.view-toggle-group {
    display: inline-flex;
    border-radius: 8px;
    overflow: hidden;
    box-shadow: 0 2px 8px rgba(0,0,0,0.1);
}

.view-toggle-group .view-btn {
    border-radius: 0;
    border: 1px solid #dee2e6;
    margin: 0;
    padding: 8px 12px;
    transition: all 0.3s ease;
    position: relative;
    z-index: 1;
}

.view-toggle-group .view-btn:first-child {
    border-top-left-radius: 8px;
    border-bottom-left-radius: 8px;
}

.view-toggle-group .view-btn:last-child {
    border-top-right-radius: 8px;
    border-bottom-right-radius: 8px;
    border-left: none;
}

.view-toggle-group .view-btn.active {
    background: var(--jollibee-red);
    border-color: var(--jollibee-red);
    color: white;
    transform: scale(1.05);
    z-index: 2;
}

.view-toggle-group .view-btn:hover:not(.active) {
    background: #f8f9fa;
    border-color: #adb5bd;
    transform: translateY(-1px);
}
</style>

@section Scripts {
<script>
$(document).ready(function() {
    let currentView = 'grid';
    
    // View Toggle
    $('.view-btn').on('click', function() {
        const view = $(this).data('view');
        if (view === currentView) return;
        
        $('.view-btn').removeClass('active');
        $(this).addClass('active');
        
        if (view === 'grid') {
            $('#listView').hide();
            $('#gridView').show();
            currentView = 'grid';
        } else {
            $('#gridView').hide();
            $('#listView').show();
            currentView = 'list';
        }
    });

    // Tìm kiếm
    $('#searchInput').on('keyup', function() {
        filterProducts();
    });

    // Bộ lọc
    $('#categoryFilter, #statusFilter, #priceFilter').on('change', function() {
        filterProducts();
    });

    // Sắp xếp
    $('#sortBy').on('change', function() {
        sortProducts();
    });

    function filterProducts() {
        var searchText = $('#searchInput').val().toLowerCase();
        var categoryFilter = $('#categoryFilter').val();
        var statusFilter = $('#statusFilter').val();
        var priceFilter = $('#priceFilter').val();
        var visibleCount = 0;

        $('.product-item, .product-row').each(function() {
            var $item = $(this);
            var name = $item.data('name');
            var category = $item.data('category');
            var status = $item.data('status').toString();
            var price = parseFloat($item.data('price'));

            var showItem = true;

            // Lọc theo tên
            if (searchText && !name.includes(searchText)) {
                showItem = false;
            }

            // Lọc theo danh mục
            if (categoryFilter && category !== categoryFilter) {
                showItem = false;
            }

            // Lọc theo trạng thái
            if (statusFilter && status !== statusFilter) {
                showItem = false;
            }

            // Lọc theo giá
            if (priceFilter) {
                var priceRange = priceFilter.split('-');
                var minPrice = parseFloat(priceRange[0]);
                var maxPrice = parseFloat(priceRange[1]);
                
                if (price < minPrice || price > maxPrice) {
                    showItem = false;
                }
            }

            if (showItem) {
                $item.show();
                visibleCount++;
            } else {
                $item.hide();
            }
        });

        $('#visibleCount').text(visibleCount);
    }

    function sortProducts() {
        var sortBy = $('#sortBy').val();
        var $container = $('#gridView');
        var $listContainer = $('#listView tbody');
        
        var items = $('.product-item').toArray();
        var listItems = $('.product-row').toArray();

        items.sort(function(a, b) {
            switch (sortBy) {
                case 'name':
                    return $(a).data('name').localeCompare($(b).data('name'));
                case 'price':
                    return parseFloat($(a).data('price')) - parseFloat($(b).data('price'));
                case 'category':
                    return $(a).data('category').localeCompare($(b).data('category'));
                default:
                    return 0;
            }
        });

        listItems.sort(function(a, b) {
            switch (sortBy) {
                case 'name':
                    return $(a).data('name').localeCompare($(b).data('name'));
                case 'price':
                    return parseFloat($(a).data('price')) - parseFloat($(b).data('price'));
                case 'category':
                    return $(a).data('category').localeCompare($(b).data('category'));
                default:
                    return 0;
            }
        });

        $container.html(items);
        $listContainer.html(listItems);
    }
});
</script>
} 