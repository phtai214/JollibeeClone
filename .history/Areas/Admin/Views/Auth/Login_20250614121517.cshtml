@model JollibeeClone.ViewModels.LoginViewModel
@{
    Layout = null;
    ViewData["Title"] = "ÄÄƒng nháº­p Admin";
}

<!DOCTYPE html>
<html lang="vi">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="icon" href="~/assets/images/logo_jollibee.png" type="image/x-icon">
    <title>@ViewData["Title"] - Jollibee Admin</title>
    
    <!-- Bootstrap CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <!-- Font Awesome -->
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet">
    <!-- Google Fonts -->
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <!-- Custom CSS -->
    <link href="~/css/admin-login.css" rel="stylesheet" />
</head>
<body>
    <!-- Background Pattern -->
    <div class="bg-pattern"></div>
    
    <!-- Floating Elements -->
    <div class="floating-elements">
        <div class="floating-item"></div>
        <div class="floating-item"></div>
        <div class="floating-item"></div>
        <div class="floating-item"></div>
    </div>

    <div class="login-container">
        <!-- Header -->
        <div class="login-header">
            <div class="brand-logo">
                <img src="~/assets/images/logo_jollibee.png" alt="Jollibee Logo" class="logo-image">
            </div>
            <h1 class="login-title">Admin Portal</h1>
            <p class="login-subtitle">ChÃ o má»«ng báº¡n Ä‘áº¿n vá»›i há»‡ thá»‘ng quáº£n trá»‹ Jollibee</p>
        </div>

        <!-- Form -->
        <div class="login-form">
            <!-- Success Alert -->
            @if (TempData["SuccessMessage"] != null)
            {
                <div class="alert alert-success" id="successAlert">
                    <i class="fas fa-check-circle"></i>
                    <span>@TempData["SuccessMessage"]</span>
                </div>
            }

            <!-- Error Alert -->
            @if (!ViewData.ModelState.IsValid)
            {
                <div class="alert alert-danger" id="errorAlert">
                    <i class="fas fa-exclamation-triangle"></i>
                    <div>
                        @foreach (var error in ViewData.ModelState.Values.SelectMany(v => v.Errors))
                        {
                            <div>@error.ErrorMessage</div>
                        }
                    </div>
                </div>
            }

            <form asp-action="Login" asp-controller="Auth" asp-area="Admin" method="post" id="loginForm">
                @Html.AntiForgeryToken()
                
                <div class="form-group">
                    <label class="form-label" asp-for="Email">Email</label>
                    <div class="input-wrapper">
                        <input 
                            asp-for="Email"
                            type="email" 
                            class="form-input" 
                            placeholder="Nhập
                            required
                        />
                        <i class="fas fa-envelope input-icon"></i>
                        <span asp-validation-for="Email" class="text-danger"></span>
                    </div>
                </div>

                <div class="form-group">
                    <label class="form-label" asp-for="Password">Mật khẩu</label>
                    <div class="input-wrapper">
                        <input 
                            asp-for="Password"
                            type="password" 
                            class="form-input" 
                            placeholder="Nhập mật khẩu của bạn"
                            required
                        />
                        <i class="fas fa-lock input-icon"></i>
                        <span asp-validation-for="Password" class="text-danger"></span>
                    </div>
                </div>

                <div class="form-check-wrapper">
                    <input asp-for="RememberMe" type="checkbox" class="form-checkbox">
                    <label asp-for="RememberMe" class="form-check-label">Ghi nhớ đăng nhập</label>
                </div>

                <button type="submit" class="login-button" id="loginBtn">
                    <span class="button-content">
                        <i class="fas fa-sign-in-alt"></i>
                        <span>Đăng nhập</span>
                    </span>
                </button>
            </form>

            <div class="footer-text">
                <p>© 2024 Jollibee Clone. Được phát triển với <i class="fas fa-heart heart"></i></p>
                <p><small>Chỉ dành cho quản trị viên có quyền truy cập</small></p>
                <p><small style="color: #666;">Demo: admin@jollibee.com / admin123</small></p>
            </div>
        </div>
    </div>

    <!-- Scripts -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.0/js/bootstrap.bundle.min.js"></script>
    
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const loginForm = document.getElementById('loginForm');
            const loginBtn = document.getElementById('loginBtn');
            const emailInput = document.querySelector('input[name="Email"]');
            const passwordInput = document.querySelector('input[name="Password"]');

            // Auto focus on email input
            if (emailInput) {
                emailInput.focus();
            }

            // Add loading state on form submission
            loginForm.addEventListener('submit', function(e) {
                loginBtn.classList.add('loading');
                loginBtn.disabled = true;
            });

            // Enhanced input interactions
            const inputs = document.querySelectorAll('.form-input');
            inputs.forEach(input => {
                input.addEventListener('focus', function() {
                    this.parentElement.style.transform = 'translateY(-2px)';
                });
                
                input.addEventListener('blur', function() {
                    this.parentElement.style.transform = 'translateY(0)';
                });
            });

            // Custom checkbox interaction
            const checkbox = document.querySelector('input[name="RememberMe"]');
            const checkboxLabel = document.querySelector('label[for="RememberMe"]');
            
            if (checkboxLabel && checkbox) {
                checkboxLabel.addEventListener('click', function(e) {
                    if (e.target === this) {
                        checkbox.checked = !checkbox.checked;
                    }
                });
            }

            // Auto-hide alerts after 5 seconds
            const alerts = document.querySelectorAll('.alert');
            alerts.forEach(alert => {
                setTimeout(() => {
                    alert.style.transition = 'opacity 0.5s ease';
                    alert.style.opacity = '0';
                    setTimeout(() => {
                        alert.style.display = 'none';
                    }, 500);
                }, 5000);
            });
        });
    </script>
</body>
</html> 

