using JollibeeClone.Models;
using Microsoft.EntityFrameworkCore;
using System.Security.Cryptography;
using System.Text;

namespace JollibeeClone.Data
{
    public static class SeedAdminData
    {
        public static async Task SeedAsync(AppDbContext context)
        {
            try
            {
                // Seed Roles first
                if (!await context.Roles.AnyAsync())
                {
                    var roles = new List<Role>
                    {
                        new Role { RoleName = "Admin" },
                        new Role { RoleName = "Manager" },
                        new Role { RoleName = "User" },
                        new Role { RoleName = "Customer" }
                    };

                    context.Roles.AddRange(roles);
                    await context.SaveChangesAsync();
                    Console.WriteLine("‚úÖ Seeded Roles successfully");
                }

                // Seed Admin User
                var adminEmail = "admin@jollibee.com";
                var adminUser = await context.Users.FirstOrDefaultAsync(u => u.Email == adminEmail);
                
                if (adminUser == null)
                {
                    // T·∫°o admin user m·ªõi
                    adminUser = new User
                    {
                        FullName = "Administrator",
                        Email = adminEmail,
                        PhoneNumber = "0123456789",
                        PasswordHash = HashPassword("admin123"), // Password c·ªë ƒë·ªãnh cho c·∫£ team
                        IsActive = true
                    };

                    context.Users.Add(adminUser);
                    await context.SaveChangesAsync();
                    Console.WriteLine("‚úÖ Created Admin User successfully");
                }
                else
                {
                    // Update existing admin password ƒë·ªÉ ƒë·ªìng b·ªô
                    adminUser.PasswordHash = HashPassword("admin123");
                    await context.SaveChangesAsync();
                    Console.WriteLine("‚úÖ Updated Admin User password");
                }

                // Assign Admin Role
                var adminRole = await context.Roles.FirstOrDefaultAsync(r => r.RoleName == "Admin");
                if (adminRole != null)
                {
                    var existingUserRole = await context.UserRoles
                        .FirstOrDefaultAsync(ur => ur.UserID == adminUser.UserID && ur.RoleID == adminRole.RoleID);

                    if (existingUserRole == null)
                    {
                        var userRole = new UserRole
                        {
                            UserID = adminUser.UserID,
                            RoleID = adminRole.RoleID
                        };

                        context.UserRoles.Add(userRole);
                        await context.SaveChangesAsync();
                        Console.WriteLine("‚úÖ Assigned Admin Role successfully");
                    }
                }

                // Seed Order Statuses
                if (!await context.OrderStatuses.AnyAsync())
                {
                    var orderStatuses = new List<OrderStatuses>
                    {
                        new OrderStatuses { StatusName = "Ch·ªù x√°c nh·∫≠n", Description = "ƒê∆°n h√†ng m·ªõi ch·ªù x√°c nh·∫≠n" },
                        new OrderStatuses { StatusName = "ƒê√£ x√°c nh·∫≠n", Description = "ƒê∆°n h√†ng ƒë√£ ƒë∆∞·ª£c x√°c nh·∫≠n" },
                        new OrderStatuses { StatusName = "ƒêang chu·∫©n b·ªã", Description = "ƒêang chu·∫©n b·ªã ƒë∆°n h√†ng" },
                        new OrderStatuses { StatusName = "ƒêang giao", Description = "ƒê∆°n h√†ng ƒëang ƒë∆∞·ª£c giao" },
                        new OrderStatuses { StatusName = "ƒê√£ giao", Description = "ƒê∆°n h√†ng ƒë√£ ƒë∆∞·ª£c giao th√†nh c√¥ng" },
                        new OrderStatuses { StatusName = "ƒê√£ h·ªßy", Description = "ƒê∆°n h√†ng ƒë√£ b·ªã h·ªßy" }
                    };

                    context.OrderStatuses.AddRange(orderStatuses);
                    await context.SaveChangesAsync();
                    Console.WriteLine("‚úÖ Seeded Order Statuses successfully");
                }

                // Seed Payment Methods
                if (!await context.PaymentMethods.AnyAsync())
                {
                    var paymentMethods = new List<PaymentMethods>
                    {
                        new PaymentMethods { MethodName = "Ti·ªÅn m·∫∑t", IsActive = true },
                        new PaymentMethods { MethodName = "Chuy·ªÉn kho·∫£n", IsActive = true },
                        new PaymentMethods { MethodName = "V√≠ ƒëi·ªán t·ª≠", IsActive = true },
                        new PaymentMethods { MethodName = "Th·∫ª t√≠n d·ª•ng", IsActive = true }
                    };

                    context.PaymentMethods.AddRange(paymentMethods);
                    await context.SaveChangesAsync();
                    Console.WriteLine("‚úÖ Seeded Payment Methods successfully");
                }

                // Seed Delivery Methods
                if (!await context.DeliveryMethods.AnyAsync())
                {
                    var deliveryMethods = new List<DeliveryMethods>
                    {
                        new DeliveryMethods { MethodName = "Giao h√†ng t·∫≠n n∆°i", Description = "Giao h√†ng t·∫≠n n∆°i trong 30-45 ph√∫t", IsActive = true },
                        new DeliveryMethods { MethodName = "Nh·∫≠n t·∫°i c·ª≠a h√†ng", Description = "Kh√°ch h√†ng ƒë·∫øn nh·∫≠n t·∫°i c·ª≠a h√†ng", IsActive = true }
                    };

                    context.DeliveryMethods.AddRange(deliveryMethods);
                    await context.SaveChangesAsync();
                    Console.WriteLine("‚úÖ Seeded Delivery Methods successfully");
                }

                // Seed Sample Categories
                if (!await context.Categories.AnyAsync())
                {
                    var categories = new List<Categories>
                    {
                        new Categories { CategoryName = "G√† Gi√≤n Vui V·∫ª", Description = "G√† r√°n gi√≤n tan, th∆°m ngon", DisplayOrder = 1, IsActive = true },
                        new Categories { CategoryName = "G√† S·ªët Cay", Description = "G√† r√°n ph·ªß s·ªët cay ƒë·∫≠m ƒë√†", DisplayOrder = 2, IsActive = true },
                        new Categories { CategoryName = "Burger/C∆°m", Description = "Burger v√† c∆°m ƒëa d·∫°ng", DisplayOrder = 3, IsActive = true },
                        new Categories { CategoryName = "M√¨ √ù Jolly", Description = "M√¨ √ù phong c√°ch √ù ch√≠nh th·ªëng", DisplayOrder = 4, IsActive = true },
                        new Categories { CategoryName = "Ph·∫ßn ƒÇn Ph·ª•", Description = "Khoai t√¢y chi√™n, t√¥m vi√™n...", DisplayOrder = 5, IsActive = true },
                        new Categories { CategoryName = "Th·ª©c U·ªëng", Description = "ƒê·ªì u·ªëng gi·∫£i kh√°t ƒëa d·∫°ng", DisplayOrder = 6, IsActive = true },
                        new Categories { CategoryName = "M√≥n Tr√°ng Mi·ªáng", Description = "B√°nh k·∫πo, kem tr√°ng mi·ªáng", DisplayOrder = 7, IsActive = true }
                    };

                    context.Categories.AddRange(categories);
                    await context.SaveChangesAsync();
                    Console.WriteLine("‚úÖ Seeded Categories successfully");
                }

                Console.WriteLine("üéâ All seed data completed successfully!");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ùå Error seeding data: {ex.Message}");
                throw;
            }
        }

        private static string HashPassword(string password)
        {
            using (var sha256 = SHA256.Create())
            {
                var hashedBytes = sha256.ComputeHash(Encoding.UTF8.GetBytes(password));
                return Convert.ToBase64String(hashedBytes);
            }
        }

        public static async Task ResetAdminPasswordAsync(AppDbContext context)
        {
            try
            {
                var adminUser = await context.Users.FirstOrDefaultAsync(u => u.Email == "admin@jollibee.com");
                if (adminUser != null)
                {
                    adminUser.PasswordHash = HashPassword("admin123");
                    await context.SaveChangesAsync();
                    Console.WriteLine("‚úÖ Admin password reset to 'admin123'");
                }
                else
                {
                    Console.WriteLine("‚ùå Admin user not found");
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ùå Error resetting admin password: {ex.Message}");
                throw;
            }
        }

        public static async Task SeedProductVariantsAsync(AppDbContext context)
        {
            // Ki·ªÉm tra xem ƒë√£ c√≥ bi·∫øn th·ªÉ ch∆∞a
            if (await context.ProductVariants.AnyAsync())
            {
                return; // ƒê√£ c√≥ d·ªØ li·ªáu r·ªìi
            }

            var products = await context.Products.ToListAsync();
            var variants = new List<ProductVariant>();

            foreach (var product in products)
            {
                // Th√™m bi·∫øn th·ªÉ size cho t·∫•t c·∫£ s·∫£n ph·∫©m
                variants.AddRange(new[]
                {
                    new ProductVariant
                    {
                        ProductID = product.ProductID,
                        VariantName = "v·ª´a",
                        VariantType = "Size",
                        PriceAdjustment = 0.00m,
                        IsDefault = true,
                        IsAvailable = true,
                        DisplayOrder = 1
                    },
                    new ProductVariant
                    {
                        ProductID = product.ProductID,
                        VariantName = "Size l·ªõn",
                        VariantType = "Size",
                        PriceAdjustment = 10000.00m,
                        IsDefault = false,
                        IsAvailable = true,
                        DisplayOrder = 2
                    }
                });

                // N·∫øu l√† ƒë·ªì u·ªëng, th√™m bi·∫øn th·ªÉ ƒë√°
                if (product.CategoryID == 5) // Assuming category 5 is drinks
                {
                    variants.AddRange(new[]
                    {
                        new ProductVariant
                        {
                            ProductID = product.ProductID,
                            VariantName = "√çt ƒë√°",
                            VariantType = "ƒê√°",
                            PriceAdjustment = 0.00m,
                            IsDefault = true,
                            IsAvailable = true,
                            DisplayOrder = 3
                        },
                        new ProductVariant
                        {
                            ProductID = product.ProductID,
                            VariantName = "Nhi·ªÅu ƒë√°",
                            VariantType = "ƒê√°",
                            PriceAdjustment = 0.00m,
                            IsDefault = false,
                            IsAvailable = true,
                            DisplayOrder = 4
                        },
                        new ProductVariant
                        {
                            ProductID = product.ProductID,
                            VariantName = "Kh√¥ng ƒë√°",
                            VariantType = "ƒê√°",
                            PriceAdjustment = 0.00m,
                            IsDefault = false,
                            IsAvailable = true,
                            DisplayOrder = 5
                        }
                    });
                }

                // N·∫øu l√† g√†, th√™m bi·∫øn th·ªÉ cay
                if (product.ProductName.ToLower().Contains("g√†") || product.ProductName.ToLower().Contains("chicken"))
                {
                    variants.AddRange(new[]
                    {
                        new ProductVariant
                        {
                            ProductID = product.ProductID,
                            VariantName = "Kh√¥ng cay",
                            VariantType = "ƒê·ªô cay",
                            PriceAdjustment = 0.00m,
                            IsDefault = true,
                            IsAvailable = true,
                            DisplayOrder = 6
                        },
                        new ProductVariant
                        {
                            ProductID = product.ProductID,
                            VariantName = "Cay v·ª´a",
                            VariantType = "ƒê·ªô cay",
                            PriceAdjustment = 0.00m,
                            IsDefault = false,
                            IsAvailable = true,
                            DisplayOrder = 7
                        },
                        new ProductVariant
                        {
                            ProductID = product.ProductID,
                            VariantName = "Cay nhi·ªÅu",
                            VariantType = "ƒê·ªô cay",
                            PriceAdjustment = 5000.00m,
                            IsDefault = false,
                            IsAvailable = true,
                            DisplayOrder = 8
                        }
                    });
                }
            }

            context.ProductVariants.AddRange(variants);
            await context.SaveChangesAsync();
        }

        // Ph∆∞∆°ng th·ª©c ch·∫°y SQL tr·ª±c ti·∫øp ƒë·ªÉ t·∫°o bi·∫øn th·ªÉ m·∫´u
        public static async Task SeedProductVariantsDirectAsync(AppDbContext context)
        {
            // Ki·ªÉm tra xem ƒë√£ c√≥ bi·∫øn th·ªÉ ch∆∞a
            if (await context.ProductVariants.AnyAsync())
            {
                return;
            }

            // T·∫°o bi·∫øn th·ªÉ cho t·∫•t c·∫£ s·∫£n ph·∫©m b·∫±ng SQL
            var sql = @"
                INSERT INTO ProductVariants (ProductID, VariantName, VariantType, PriceAdjustment, IsDefault, IsAvailable, DisplayOrder)
                SELECT 
                    p.ProductID,
                    'Size v·ª´a' as VariantName,
                    'Size' as VariantType,
                    0.00 as PriceAdjustment,
                    1 as IsDefault,
                    1 as IsAvailable,
                    1 as DisplayOrder
                FROM Products p
                WHERE p.IsAvailable = 1

                UNION ALL

                SELECT 
                    p.ProductID,
                    'Size l·ªõn' as VariantName,
                    'Size' as VariantType,
                    10000.00 as PriceAdjustment,
                    0 as IsDefault,
                    1 as IsAvailable,
                    2 as DisplayOrder
                FROM Products p
                WHERE p.IsAvailable = 1

                UNION ALL

                SELECT 
                    p.ProductID,
                    'Th√™m ph√¥ mai' as VariantName,
                    'Topping' as VariantType,
                    5000.00 as PriceAdjustment,
                    0 as IsDefault,
                    1 as IsAvailable,
                    3 as DisplayOrder
                FROM Products p
                WHERE p.IsAvailable = 1 AND (LOWER(p.ProductName) LIKE '%burger%' OR LOWER(p.ProductName) LIKE '%b√°nh%')
            ";

            await context.Database.ExecuteSqlRawAsync(sql);
        }
    }
} 